{
  "address": "0x0C9D01FbD07cC2fD3e09bD953bb65698351AF05D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "conclusion",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldControlVariable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newControlVariable",
          "type": "uint256"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "change",
          "type": "uint128"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[2]",
          "name": "_tokens",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_market",
          "type": "uint256[4]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "_id",
          "type": "uint48"
        },
        {
          "internalType": "uint256[2]",
          "name": "_amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "address[2]",
          "name": "_addresses",
          "type": "address[2]"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_dao",
          "type": "bool"
        }
      ],
      "name": "disableRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxExpiry",
          "type": "uint256"
        }
      ],
      "name": "findMarketFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "instantSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "firstIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastIndex",
          "type": "uint256"
        }
      ],
      "name": "liveMarketsBetween",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_creator",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_base",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "baseToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "call",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "marketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForCreator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "maxIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "baseDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "controlVariable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingContract",
      "outputs": [
        {
          "internalType": "contract IVesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc90b725c167aa30db9561590658a0c6b135e32aca05a6c521af70aabba908dca",
  "receipt": {
    "to": null,
    "from": "0x6e36b2f9f2BcC273f090ff049952Fa4B5Cc67567",
    "contractAddress": "0x0C9D01FbD07cC2fD3e09bD953bb65698351AF05D",
    "transactionIndex": 15,
    "gasUsed": "4551272",
    "logsBloom": "0x
    "blockHash": "0x382bf08b074062c2279048570c4614db4354ed08bb83b3d71ad5ee1f6a21fcb6",
    "transactionHash": "0xc90b725c167aa30db9561590658a0c6b135e32aca05a6c521af70aabba908dca",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 7035430,
        "transactionHash": "0xc90b725c167aa30db9561590658a0c6b135e32aca05a6c521af70aabba908dca",
        "address": "0x0C9D01FbD07cC2fD3e09bD953bb65698351AF05D",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000004a8c9502a34962a2c6d73c5d181daaef3dcdc88d"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x382bf08b074062c2279048570c4614db4354ed08bb83b3d71ad5ee1f6a21fcb6"
      }
    ],
    "blockNumber": 7035430,
    "cumulativeGasUsed": "5603380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4A8c9502A34962a2C6d73c5D181dAaeF3dcDc88D"
  ],
  "solcInputHash": "425eb1f5993ee96e475c14c00fa27971",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conclusion\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldControlVariable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newControlVariable\",\"type\":\"uint256\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"change\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[2]\",\"name\":\"_tokens\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_market\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"_id\",\"type\":\"uint48\"},{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[2]\",\"name\":\"_addresses\",\"type\":\"address[2]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dao\",\"type\":\"bool\"}],\"name\":\"disableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxExpiry\",\"type\":\"uint256\"}],\"name\":\"findMarketFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"instantSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastIndex\",\"type\":\"uint256\"}],\"name\":\"liveMarketsBetween\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_creator\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_base\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"call\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"marketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"maxIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"baseDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"contract IVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeus, Indigo Review by: JeffX\",\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address[2],uint256[4],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in base token decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term, call]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in base or quote), initial price / base, minimum price, debt buffer (3 decimals)]\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\",\"_tokens\":\"[base token for payout, quote token used to deposit]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in base token decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in base token decimals\"}},\"deposit(uint48,uint256[2],address[2])\":{\"params\":{\"_addresses\":\"[recipient, referrer]\",\"_amounts\":\"[amount in, min amount out]\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"indexes_\":\"   the pending notes for the user\"}},\"instantSwap(uint256)\":{\"params\":{\"_id\":\"market ID to search for\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(bool,bool,address)\":{\"params\":{\"_address\":\"address of creator or token to query by\",\"_base\":\"if query is for markets by token, search by base or quote token\",\"_creator\":\"is query for markets by creator, or for markets by token\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in base token decimals price is derived from the equation p = c * d where p = price c = control variable d = debt d -= ( d * (dt / l) )  where dt = change in time l = length of program if price is below minimum price, minimum price is returned this is enforced on deposits by manipulating total debt (see _decay())\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of base tokens to be paid\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"}}},\"title\":\"Olympus Pro Depository V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing marketmust be creator\"},\"create(address[2],uint256[4],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"deposit(uint48,uint256[2],address[2])\":{\"notice\":\"deposit quote tokens in exchange for a bond in a specified market\"},\"disableRewards(bool)\":{\"notice\":\"turn off rewards for front end operators and DAO\"},\"enableRewards()\":{\"notice\":\"turn on rewards for front end operators and DAO\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"instantSwap(uint256)\":{\"notice\":\"does market send payout immediately\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsBetween(uint256,uint256)\":{\"notice\":\"returns array of active market IDs within a rangeshould be used if length exceeds max to query entire array\"},\"liveMarketsFor(bool,bool,address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of base token in quote tokens\"},\"maxIn(uint256)\":{\"notice\":\"returns maximum quote token in for market\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"whitelist(address)\":{\"notice\":\"add or remove addresses from the front end reward whitelist\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testnet/TestnetOPBondDepo.sol\":\"TestnetOPBondDepo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/testnet/TestnetOPBondDepo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"./types/MarketCreator.sol\\\";\\nimport \\\"./types/NoteKeeper.sol\\\";\\nimport \\\"./types/Rewarder.sol\\\";\\nimport \\\"./types/Viewer.sol\\\";\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IOlympusPro.sol\\\";\\nimport \\\"./interfaces/IProCall.sol\\\";\\n\\n/// @title Olympus Pro Depository V2\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract TestnetOPBondDepo is ProMarketCreator, ProViewer, ProNoteKeeper, ProRewarder {\\n    using SafeERC20 for IERC20;\\n\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n    event Tuned(uint256 indexed id, uint256 oldControlVariable, uint256 newControlVariable);\\n\\n    constructor(address _authority)\\n        ProMarketCreator()\\n        ProViewer()\\n        ProNoteKeeper()\\n        ProRewarder(IOlympusAuthority(_authority))\\n    {}\\n\\n    /* ========== EXTERNAL ========== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond in a specified market\\n     * @param _amounts     [amount in, min amount out]\\n     * @param _addresses   [recipient, referrer]\\n     */\\n    function deposit(\\n        uint48 _id,\\n        uint256[2] memory _amounts,\\n        address[2] memory _addresses\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n        address sendTo; // receives base tokens at time of deposit\\n        uint256 price = _decayAndGetPrice(_id, currentTime); // Debt and the control variable decay over time\\n\\n        // Markets end at a defined timestamp\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = base tokens out\\n         * amount = quote tokens in\\n         * price = quote tokens : base token (i.e. 200 QUOTE : BASE)\\n         */\\n        payout_ = (_amounts[0] * (10**(2 * metadata[_id].baseDecimals))) / price / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        // payout must be greater than user inputted minimum\\n        require(payout_ >= _amounts[1], \\\"Depository: Less than min out\\\");\\n\\n        // if there is no vesting time, the deposit is treated as an instant swap.\\n        // in this case, the recipient (_address[0]) receives the payout immediately.\\n        // otherwise, deposit info is stored and payout is available at a future timestamp.\\n        if ((term.fixedTerm && term.vesting == 0) || (!term.fixedTerm && term.vesting <= block.timestamp)) {\\n            // instant swap case\\n            sendTo = _addresses[0];\\n\\n            // Note zero expiry denotes an instant swap in return values\\n            expiry_ = 0;\\n        } else {\\n            // vested swap case\\n            sendTo = address(vestingContract);\\n\\n            // we have to store info about their deposit\\n\\n            /**\\n             * bonds mature with a cliff at a set timestamp\\n             * prior to the expiry timestamp, no payout tokens are accessible to the user\\n             * after the expiry timestamp, the entire payout can be redeemed\\n             *\\n             * there are two types of bonds: fixed-term and fixed-expiration\\n             *\\n             * fixed-term bonds mature in a set amount of time from deposit\\n             * i.e. term = 1 week. when alice deposits on day 1, her bond\\n             * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n             *\\n             * fixed-expiration bonds mature at a set timestamp\\n             * i.e. expiration = day 10. when alice deposits on day 1, her term\\n             * is 9 days. when bob deposits on day 2, his term is 8 days.\\n             */\\n            expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n            // the index of the note is the next in the user's array\\n            index_ = notes[_addresses[0]].length;\\n\\n            /**\\n             * user data is stored as Notes. these are isolated array entries\\n             * storing the amount due, the time created, the time when payout\\n             * is redeemable, the time when payout was redeemed, the ID\\n             * of the market deposited into, and the payout (quote) token.\\n             */\\n            notes[_addresses[0]].push(\\n                Note({\\n                    payout: payout_,\\n                    created: uint48(block.timestamp),\\n                    matured: uint48(expiry_),\\n                    redeemed: 0,\\n                    marketID: uint48(_id),\\n                    token: address(market.baseToken)\\n                })\\n            );\\n        }\\n\\n        /*\\n         * capacity is either the number of base tokens that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n\\n        // capacity is decreased by the deposited or paid amount\\n        market.capacity -= market.capacityInQuote ? _amounts[0] : payout_;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how many base tokens have been sold\\n        market.purchased += _amounts[0];\\n        market.sold += payout_;\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += payout_;\\n\\n        emit Bond(_id, _amounts[0], price);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime, price); // TODO\\n        }\\n\\n        // give fees, and transfer in base tokens from creator\\n        _getBaseTokens(market.call, _id, _amounts[0], payout_, _addresses[1]);\\n\\n        // if instant swap, send payout to recipient. otherwise, sent to vesting\\n        markets[_id].baseToken.safeTransfer(sendTo, payout_);\\n\\n        // transfer payment to creator\\n        markets[_id].quoteToken.safeTransferFrom(msg.sender, markets[_id].creator, _amounts[0]);\\n    }\\n\\n    /* ========== INTERNAL ========== */\\n\\n    /**\\n     * @notice             calculate current market price of base token in quote tokens\\n     * @dev                see marketPrice() for explanation of price computation\\n     * @dev                uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id          market ID\\n     * @return             price for market in base token decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * markets[_id].totalDebt) / 10**metadata[_id].baseDecimals;\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decayAndGetPrice(uint256 _id, uint48 _time) internal returns (uint256 marketPrice_) {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= _debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint256 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id); // implementation in ProViewer\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= uint128(adjustBy);\\n                adjustment.timeToAdjusted -= secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n\\n        // a minimum price is maintained by raising debt back up if price has fallen below.\\n        marketPrice_ = _marketPrice(_id);\\n        uint256 minPrice = markets[_id].minPrice;\\n        if (marketPrice_ < minPrice) {\\n            markets[_id].totalDebt = (markets[_id].totalDebt * minPrice) / marketPrice_;\\n            marketPrice_ = minPrice;\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(\\n        uint256 _id,\\n        uint48 _time,\\n        uint256 _price\\n    ) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n\\n            // standardize capacity into an base token amount\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * (10**(2 * meta.baseDecimals))) / _price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 TOKEN. max payout would be 1,000 TOKEN (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = (capacity * meta.depositInterval) / timeRemaining;\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target deb\\n            uint256 newControlVariable = (_price * (10**meta.baseDecimals)) / targetDebt;\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint256 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(uint128(change), _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    function _getBaseTokens(\\n        bool _call,\\n        uint48 _id,\\n        uint256 _amount,\\n        uint256 _payout,\\n        address _referrer\\n    ) internal {\\n        IERC20 baseToken = markets[_id].baseToken;\\n\\n        /**\\n         * front end operators can earn rewards by referring users\\n         * transfers in reward amount to this contract (must be separate\\n         * transfer because payout may be sent directly to _address[0])\\n         */\\n        uint256 fee = _giveRewards(baseToken, _payout, _referrer);\\n\\n        /**\\n         * instead of basic transferFrom, creator can be called. useful if creator\\n         * i.e. mints the tokens, or wants custom logic blocking transactions.\\n         * the balance of the correct recipient must be increased by the payout amount.\\n         * note that call could reenter, so this is done second to last, followed only by paying creator.\\n         */\\n        if (_call) {\\n            uint256 balance = baseToken.balanceOf(address(this));\\n            IProCall(markets[_id].creator).call(_id, _amount, _payout + fee);\\n            require(baseToken.balanceOf(address(this)) >= balance + _payout + fee, \\\"Depository: not funded\\\");\\n\\n            // default is to simply transfer tokens in. make sure creator has approved this address.\\n        } else baseToken.safeTransferFrom(markets[_id].creator, address(this), _payout + fee);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function _debtDecay(uint256 _id) internal view returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return (markets[_id].totalDebt * secondsSince) / meta.length;\\n    }\\n}\\n\",\"keccak256\":\"0x9f6fcb3d8d3fa8f878d01d48176d87f22a447e00485704b4145b2693ad9e86c7\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/interfaces/IOlympusPro.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IProMarketCreator.sol\\\";\\nimport \\\"./IProNoteKeeper.sol\\\";\\nimport \\\"./IProViewer.sol\\\";\\n\\ninterface IOlympusPro is IProMarketCreator, IProNoteKeeper, IProViewer {\\n    /**\\n     * @notice deposit quote tokens in exchange for a bond in a specified market\\n     */\\n    function deposit(\\n        uint48 _id,\\n        uint256[2] memory _amounts,\\n        address[2] memory _addresses\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n}\\n\",\"keccak256\":\"0x1415978df685dbffe1253fcce07276130465a244c3cc0e98e45999d88a90e264\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/interfaces/IProCall.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IProCall {\\n    function call(\\n        uint256 id,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe5ad3063429aaf734eaa6d6bb9c4797e3ebbd731ab14064b4d0571704b1d2403\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/interfaces/IProMarketCreator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\ninterface IProMarketCreator {\\n    // Info about each type of market\\n    struct Market {\\n        address creator; // market creator. sends base tokens, receives quote tokens\\n        IERC20 baseToken; // token to pay depositors with\\n        IERC20 quoteToken; // token to accept as payment\\n        bool call; // perform custom call for payout\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\n        uint256 capacity; // capacity remaining\\n        uint256 totalDebt; // total base token debt from market\\n        uint256 minPrice; // minimum price (debt will stop decaying to maintain this)\\n        uint256 maxPayout; // max base tokens out in one order\\n        uint256 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        uint256 controlVariable; // scaling variable for price\\n        uint256 maxDebt; // max base token debt accrued\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 baseDecimals; // decimals of base token\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint128 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    function create(\\n        IERC20[2] memory _tokens, // [base token, quote token]\\n        uint256[4] memory _market, // [capacity, initial price, minimum price, debt buffer]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n}\\n\",\"keccak256\":\"0x34b441ea320fec587e77a28e48a85600e827f839c477483e09f4e0046f15b4f2\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/interfaces/IProNoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\ninterface IProNoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gOHM remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n        address token; // token to be paid.\\n    }\\n\\n    function redeem(address _user, uint256[] memory _indexes) external;\\n\\n    function redeemAll(address _user) external;\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0x728ec8d71a0123c695bffa9d7f744049c3e1a7c276e317414fd7b7d69a065800\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/interfaces/IProViewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\ninterface IProViewer {\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(\\n        bool _creator,\\n        bool _base,\\n        address _address\\n    ) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x22bf9e6051a1a139169dc55ca651a54bb52a74314d7d513d24ba234570f509f2\",\"license\":\"AGPL-3.0\"},\"contracts/testnet/types/MarketCreator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IProMarketCreator.sol\\\";\\n\\nabstract contract ProMarketCreator is IProMarketCreator {\\n\\n/* ========== EVENTS ========== */\\n\\n  event CreateMarket(uint256 indexed id, address baseToken, address quoteToken, uint256 initialPrice, uint256 conclusion);\\n  event CloseMarket(uint256 indexed id);\\n\\n/* ========== STATE VARIABLES ========== */\\n\\n  // Markets\\n  Market[] public markets; // persistent market data\\n  Terms[] public terms; // deposit construction data\\n  Metadata[] public metadata; // extraneous market data\\n  mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n  // Queries\\n  mapping(address => uint256[]) public marketsForBase; // market IDs for base token\\n  mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n  mapping(address => uint256[]) public marketsForCreator; // market IDs for market creator\\n\\n/* ========== CREATE ========== */\\n\\n  /**\\n   * @notice             creates a new market type\\n   * @dev                current price should be in base token decimals.\\n   * @param _tokens      [base token for payout, quote token used to deposit]\\n   * @param _market      [capacity (in base or quote), initial price / base, minimum price, debt buffer (3 decimals)]\\n   * @param _booleans    [capacity in quote, fixed term, call]\\n   * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n   * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n   * @return id_         ID of new bond market\\n   */\\n  function create(\\n    IERC20[2] memory _tokens,\\n    uint256[4] memory _market,\\n    bool[2] memory _booleans,\\n    uint256[2] memory _terms,\\n    uint32[2] memory _intervals\\n  ) external override returns (uint256 id_) {\\n    require(_market[1] >= _market[2], \\\"Creator: min price must be > initial\\\");\\n\\n    // depositing into, or getting info for, the created market uses this ID\\n    id_ = markets.length;\\n\\n    marketsForBase[address(_tokens[0])].push(id_);\\n    marketsForQuote[address(_tokens[1])].push(id_);\\n    marketsForCreator[msg.sender].push(id_);\\n\\n    emit CreateMarket(id_, address(_tokens[0]), address(_tokens[1]), _market[1], _terms[1]);\\n\\n    // the length of the program, in seconds\\n    uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n    // the decimal count of the base and quote token\\n    uint256 baseDecimals = IERC20Metadata(address(_tokens[0])).decimals();\\n    uint256 quoteDecimals = IERC20Metadata(address(_tokens[1])).decimals();\\n\\n    metadata.push(Metadata({\\n      lastTune: uint48(block.timestamp),\\n      lastDecay: uint48(block.timestamp),\\n      length: uint48(secondsToConclusion),\\n      depositInterval: _intervals[0],\\n      tuneInterval: _intervals[1],\\n      baseDecimals: uint8(baseDecimals),\\n      quoteDecimals: uint8(quoteDecimals)\\n    }));\\n\\n    /* \\n     * initial target debt is equal to capacity (this is the amount of debt\\n     * that will decay over in the length of the program if price remains the same).\\n     * it is converted into base token terms if passed in in quote token terms.\\n     */\\n    uint256 targetDebt = _booleans[0]\\n      ? (_market[0] * (10 ** (2 * baseDecimals)) / _market[1]) / 10 ** quoteDecimals\\n      : _market[0];\\n\\n    /*\\n     * max payout is the amount of capacity that should be utilized in a deposit\\n     * interval. for example, if capacity is 1,000 TOKEN, there are 10 days to conclusion, \\n     * and the preferred deposit interval is 1 day, max payout would be 100 TOKEN.\\n     */\\n    uint256 maxPayout = targetDebt * _intervals[0] / secondsToConclusion;\\n\\n    markets.push(Market({\\n      creator: msg.sender,\\n      baseToken: _tokens[0],\\n      quoteToken: _tokens[1],\\n      call: false,\\n      capacityInQuote: _booleans[0],\\n      capacity: _market[0],\\n      totalDebt: targetDebt, \\n      minPrice: _market[2],\\n      maxPayout: maxPayout,\\n      purchased: 0,\\n      sold: 0\\n    }));\\n\\n    /*\\n     * max debt serves as a circuit breaker for the market. let's say the quote\\n     * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n     * market would continue to buy until it runs out of capacity. this is\\n     * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n     * note that its likely advisable to keep this buffer wide.\\n     * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n     */\\n    uint256 maxDebt = targetDebt + (targetDebt * _market[3] / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n    /*\\n     * the control variable is set so that initial price equals the desired\\n     * initial price. the control variable is the ultimate determinant of price,\\n     * so we compute this last.\\n     *\\n     * price = control variable * debt ratio\\n     * debt ratio = total debt / supply\\n     * therefore, control variable = price / debt ratio\\n     */\\n    uint256 controlVariable = _market[1] * (10 ** baseDecimals) / targetDebt;\\n\\n    terms.push(Terms({\\n      fixedTerm: _booleans[1], \\n      controlVariable: controlVariable,\\n      vesting: uint48(_terms[0]), \\n      conclusion: uint48(_terms[1]), \\n      maxDebt: maxDebt\\n    }));\\n  }\\n\\n/* ========== CLOSE ========== */\\n\\n  /**\\n   * @notice             disable existing market\\n   * @notice             must be creator\\n   * @param _id          ID of market to close\\n   */\\n  function close(uint256 _id) external override {\\n    require(msg.sender == markets[_id].creator, \\\"Only creator\\\");\\n    terms[_id].conclusion = uint48(block.timestamp);\\n    markets[_id].capacity = 0;\\n    emit CloseMarket(_id);\\n  }\\n}\\n\",\"keccak256\":\"0xab8cc00927b5da213e653ed662d1ba709132366bb0d63150e18a7195c8d1a535\",\"license\":\"AGPL-3.0-only\"},\"contracts/testnet/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IProNoteKeeper.sol\\\";\\n\\ncontract ProVesting {\\n    address internal immutable depository;\\n    \\n    constructor() {\\n      depository = msg.sender;\\n    }\\n\\n    function transfer(address token, address to, uint256 amount) external {\\n        require(msg.sender == depository, \\\"Vesting: Only depository\\\");\\n        IERC20(token).transfer(to, amount);\\n    }\\n}\\n\\ninterface IVesting {\\n  function transfer(address token, address to, uint256 amount) external;\\n}\\n\\nabstract contract ProNoteKeeper is IProNoteKeeper {\\n\\n  mapping(address => Note[]) public notes; // user deposit data\\n  mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n  IVesting public immutable vestingContract;\\n\\n  constructor () {\\n    vestingContract = IVesting(address(new ProVesting()));\\n  }\\n\\n/* ========== REDEEM ========== */\\n\\n  /**\\n   * @notice             redeem notes for user\\n   * @param _user        the user to redeem for\\n   * @param _indexes     the note indexes to redeem\\n   */\\n  function redeem(address _user, uint256[] memory _indexes) public override {\\n    uint48 time = uint48(block.timestamp);\\n\\n    for (uint256 i = 0; i < _indexes.length; i++) {\\n      Note storage note = notes[_user][_indexes[i]];\\n\\n      bool matured = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n\\n      if (matured) {\\n        note.redeemed = time; // mark as redeemed\\n        vestingContract.transfer(note.token, _user, note.payout);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice             redeem all redeemable markets for user\\n   * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n   * @param _user        user to redeem all notes for\\n   */ \\n  function redeemAll(address _user) external override {\\n    return redeem(_user, indexesFor(_user));\\n  }\\n\\n/* ========== TRANSFER ========== */\\n\\n  /**\\n   * @notice             approve an address to transfer a note\\n   * @param _to          address to approve note transfer for\\n   * @param _index       index of note to approve transfer for\\n   */ \\n  function pushNote(address _to, uint256 _index) external override {\\n    require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n    noteTransfers[msg.sender][_index] = _to;\\n  }\\n\\n  /**\\n   * @notice             transfer a note that has been approved by an address\\n   * @param _from        the address that approved the note transfer\\n   * @param _index       the index of the note to transfer (in the sender's array)\\n   */ \\n  function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n    require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n    require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n    newIndex_ = notes[msg.sender].length;\\n    notes[msg.sender].push(notes[_from][_index]);\\n\\n    delete notes[_from][_index];\\n  }\\n\\n/* ========== VIEW ========== */\\n\\n  // Note info\\n\\n  /**\\n   * @notice             all pending notes for user\\n   * @param _user        the user to query notes for\\n   * @return indexes_    the pending notes for the user\\n   */\\n  function indexesFor(address _user) public view override returns (uint256[] memory indexes_) {\\n    Note[] memory info = notes[_user];\\n\\n    uint256 length;\\n    for (uint256 i = 0; i < info.length; i++) {\\n      if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n    }\\n\\n    indexes_ = new uint256[](length);\\n    uint256 position;\\n\\n    for (uint256 i = 0; i < info.length; i++) {\\n      if (info[i].redeemed == 0 && info[i].payout != 0) {\\n        indexes_[position] = i;\\n        position++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice             calculate amount available for claim for a single note\\n   * @param _user        the user that the note belongs to\\n   * @param _index       the index of the note in the user's array\\n   * @return payout_     the payout due\\n   * @return matured_    if the payout can be redeemed\\n   */\\n  function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n    Note memory note = notes[_user][_index];\\n\\n    payout_ = note.payout;\\n    matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n  }\\n}\\n\",\"keccak256\":\"0xd339bd076fdcd24b62ddbf074e1752adac961055f1a5e16038dc0ee04bf33b40\",\"license\":\"AGPL-3.0-only\"},\"contracts/testnet/types/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../../types/OlympusAccessControlled.sol\\\";\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\nabstract contract ProRewarder is OlympusAccessControlled {\\n\\n/* ========== STATE VARIABLES ========== */\\n\\n  uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n  uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n\\n  mapping(address => mapping(IERC20 => uint256)) public rewards; // front end operator rewards\\n  mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n  constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\\n\\n/* ========== EXTERNAL FUNCTIONS ========== */\\n\\n  // pay reward to front end operator\\n  function getReward(IERC20[] memory tokens) external {\\n    for (uint256 i; i < tokens.length; i++) {\\n      uint256 reward = rewards[msg.sender][tokens[i]];\\n\\n      rewards[msg.sender][tokens[i]] = 0;\\n      tokens[i].transfer(msg.sender, reward);\\n    }\\n  }\\n\\n/* ========== INTERNAL ========== */\\n\\n  /** \\n   * @notice add new market payout to user data\\n   */\\n  function _giveRewards(\\n    IERC20 _token,\\n    uint256 _payout,\\n    address _referral\\n  ) internal returns (uint256) {\\n    // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n    uint256 toDAO = _payout * daoReward / 1e4;\\n    uint256 toRef = _payout * refReward / 1e4;\\n\\n    // and store them in our rewards mapping\\n    if (whitelisted[_referral]) {\\n      rewards[_referral][_token] += toRef;\\n      rewards[authority.guardian()][_token] += toDAO;\\n    } else { // the DAO receives both rewards if referrer is not whitelisted\\n      rewards[authority.guardian()][_token] += toDAO + toRef;\\n    }\\n    return toDAO + toRef;\\n  }\\n\\n/* ========== OWNABLE ========== */ \\n\\n  /**\\n   * @notice turn on rewards for front end operators and DAO\\n   */\\n  function enableRewards() external onlyGovernor {\\n    refReward = 3;\\n    daoReward = 30;\\n  }\\n\\n  /**\\n   * @notice turn off rewards for front end operators and DAO\\n   */\\n  function disableRewards(bool _dao) external onlyGovernor {\\n    if (_dao) {\\n      daoReward = 0;\\n    } else {\\n      refReward = 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice add or remove addresses from the front end reward whitelist\\n   */\\n  function whitelist(address _operator) external onlyPolicy {\\n    whitelisted[_operator] = !whitelisted[_operator];\\n  }\\n}\\n\",\"keccak256\":\"0xb36ba6d1ddd503a1496f765baa8a671e431cf29c3eec965e2a906eea8f2a8d85\",\"license\":\"AGPL-3.0-only\"},\"contracts/testnet/types/Viewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"./MarketCreator.sol\\\";\\nimport \\\"../interfaces/IProViewer.sol\\\";\\n\\nabstract contract ProViewer is IProViewer, ProMarketCreator {\\n\\n    constructor() ProMarketCreator() {}\\n\\n/* ========== EXTERNAL VIEW ========== */\\n\\n  /**\\n   * @notice             calculate current market price of base token in quote tokens\\n   * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n   * @param _id          ID of market\\n   * @return             price for market in base token decimals\\n   *\\n   * price is derived from the equation\\n   *\\n   * p = c * d\\n   *\\n   * where\\n   * p = price\\n   * c = control variable\\n   * d = debt\\n   *\\n   * d -= ( d * (dt / l) )\\n   * \\n   * where\\n   * dt = change in time\\n   * l = length of program\\n   *\\n   * if price is below minimum price, minimum price is returned\\n   * this is enforced on deposits by manipulating total debt (see _decay())\\n   */\\n  function marketPrice(uint256 _id) public view override returns (uint256) {\\n    uint256 price = \\n      currentControlVariable(_id)\\n      * currentDebt(_id)\\n      / (10 ** metadata[_id].baseDecimals);\\n    return \\n      (price > markets[_id].minPrice) \\n      ? price \\n      : markets[_id].minPrice;\\n  }\\n\\n  /**\\n   * @notice             payout due for amount of quote tokens\\n   * @dev                accounts for debt and control variable decay so it is up to date\\n   * @param _amount      amount of quote tokens to spend\\n   * @param _id          ID of market\\n   * @return             amount of base tokens to be paid\\n   */\\n  function payoutFor(uint256 _amount, uint256 _id) public view override returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n    return \\n      _amount\\n      * 10 ** (2 * meta.baseDecimals)\\n      / marketPrice(_id)\\n      / 10 ** meta.quoteDecimals;\\n  }\\n\\n  /**\\n   * @notice             calculate debt factoring in decay\\n   * @dev                accounts for debt decay since last deposit\\n   * @param _id          ID of market\\n   * @return             current debt for market in base token decimals\\n   */\\n  function currentDebt(uint256 _id) public view override returns (uint256) {\\n    uint256 decay = markets[_id].totalDebt \\n      * (block.timestamp - metadata[_id].lastDecay) \\n      / metadata[_id].length;\\n    return markets[_id].totalDebt - decay;\\n  }\\n\\n  /**\\n   * @notice             up to date control variable\\n   * @dev                accounts for control variable adjustment\\n   * @param _id          ID of market\\n   * @return             control variable for market in base token decimals\\n   */\\n  function currentControlVariable(uint256 _id) public view returns (uint256) {\\n    (uint256 decay,,) = _controlDecay(_id);\\n    return terms[_id].controlVariable - decay;\\n  }\\n\\n  /**\\n   * @notice             returns maximum quote token in for market\\n   */\\n  function maxIn(uint256 _id) public view returns (uint256) {\\n    Metadata memory meta = metadata[_id];\\n    return\\n      markets[_id].maxPayout\\n      * 10 ** meta.quoteDecimals\\n      * marketPrice(_id)\\n      / 2 * (10 ** meta.baseDecimals);\\n  }\\n\\n  /**\\n   * @notice             does market send payout immediately\\n   * @param _id          market ID to search for\\n   */\\n  function instantSwap(uint256 _id) public view returns (bool) {\\n    Terms memory term = terms[_id];\\n    return (term.fixedTerm && term.vesting == 0) || (!term.fixedTerm && term.vesting <= block.timestamp);\\n  }\\n\\n  /**\\n   * @notice             is a given market accepting deposits\\n   * @param _id          ID of market\\n   */\\n  function isLive(uint256 _id) public view override returns (bool) {\\n    return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n  }\\n\\n  /**\\n   * @notice             returns an array of all active market IDs\\n   */\\n  function liveMarkets() external view override returns (uint256[] memory) {\\n    return liveMarketsBetween(0, markets.length);\\n  }\\n\\n  /**\\n   * @notice             returns array of active market IDs within a range\\n   * @notice             should be used if length exceeds max to query entire array\\n   */\\n  function liveMarketsBetween(uint256 firstIndex, uint256 lastIndex) public view returns (uint256[] memory) {\\n    uint256 num;\\n    for (uint256 i = firstIndex; i < lastIndex; i++) {\\n      if (isLive(i)) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n    for (uint256 i = firstIndex; i < lastIndex; i++) {\\n      if (isLive(i)) {\\n        ids[nonce] = i;\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice             returns an array of all active market IDs for a given quote token\\n   * @param _creator     is query for markets by creator, or for markets by token\\n   * @param _base        if query is for markets by token, search by base or quote token\\n   * @param _address     address of creator or token to query by\\n   */\\n  function liveMarketsFor(bool _creator, bool _base, address _address) public view override returns (uint256[] memory) {\\n    uint256[] memory mkts;\\n    \\n    if (_creator) {\\n      mkts = marketsForCreator[_address];\\n    } else {\\n      mkts = _base \\n      ? marketsForBase[_address]\\n      : marketsForQuote[_address];\\n    }\\n\\n    uint256 num;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) num++;\\n    }\\n\\n    uint256[] memory ids = new uint256[](num);\\n    uint256 nonce;\\n\\n    for (uint256 i = 0; i < mkts.length; i++) {\\n      if (isLive(mkts[i])) {\\n        ids[nonce] = mkts[i];\\n        nonce++;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n\\n  function marketsFor(address tokenIn, address tokenOut) public view returns (uint256[] memory) {\\n    uint256[] memory forBase = liveMarketsFor(false, true, tokenOut);\\n    uint256[] memory ids;\\n    uint256 nonce;\\n    for(uint256 i; i < forBase.length; i++) {\\n      if (address(markets[forBase[i]].quoteToken) == tokenIn) {\\n        ids[nonce] = forBase[i];\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  function findMarketFor(\\n    address tokenIn, \\n    address tokenOut, \\n    uint256 amountIn, \\n    uint256 minAmountOut, \\n    uint256 maxExpiry\\n  ) external view returns (uint256 id) {\\n    uint256[] memory ids = marketsFor(tokenIn, tokenOut);\\n    uint256[] memory payouts;\\n    uint256 n;\\n    for(uint256 i; i < ids.length; i++) {\\n      Terms memory term = terms[ids[i]];\\n\\n      uint256 expiry = term.fixedTerm ? block.timestamp + term.vesting : term.vesting;\\n      require(expiry <= maxExpiry, \\\"Bad expiry\\\");\\n\\n      if (minAmountOut > markets[ids[i]].maxPayout) {\\n        payouts[n] = payoutFor(amountIn, ids[i]);\\n      } else {\\n        payouts[n] = 0;\\n      }\\n      n++;\\n    }\\n    uint256 highestOut;\\n    for (uint256 i; i < payouts.length; i++) {\\n      if (payouts[i] > highestOut) {\\n        highestOut = payouts[i];\\n        id = ids[i];\\n      }\\n    }\\n  }\\n\\n/* ========== INTERNAL VIEW ========== */\\n\\n  /**\\n   * @notice                  amount to decay control variable by\\n   * @param _id               ID of market\\n   * @return decay_           change in control variable\\n   * @return secondsSince_    seconds since last change in control variable\\n   * @return active_          whether or not change remains active\\n   */ \\n  function _controlDecay(uint256 _id) internal view returns (uint256 decay_, uint48 secondsSince_, bool active_) {\\n    Adjustment memory info = adjustments[_id];\\n    if (!info.active) return (0, 0, false);\\n\\n    secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n    active_ = secondsSince_ < info.timeToAdjusted;\\n    decay_ = active_ \\n      ? info.change * secondsSince_ / info.timeToAdjusted\\n      : info.change;\\n  }\\n}\\n\",\"keccak256\":\"0x89c51d8fb7ebdec774630be9d489345e1696d5ca26da3e505043730a41b86c0a\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0604052600c60a08190526b15539055551213d49256915160a21b60c09081526200002f9160099190620000e4565b503480156200003d57600080fd5b506040516200524238038062005242833981016040819052620000609162000198565b8080604051620000709062000173565b604051809103906000f0801580156200008d573d6000803e3d6000fd5b506001600160a01b03908116608052600a80546001600160a01b03191691831691821790556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250505062000207565b828054620000f290620001ca565b90600052602060002090601f01602090048101928262000116576000855562000161565b82601f106200013157805160ff191683800117855562000161565b8280016001018555821562000161579182015b828111156200016157825182559160200191906001019062000144565b506200016f92915062000181565b5090565b61021e806200502483390190565b5b808211156200016f576000815560010162000182565b600060208284031215620001ab57600080fd5b81516001600160a01b0381168114620001c357600080fd5b9392505050565b600181811c90821680620001df57607f821691505b602082108114156200020157634e487b7160e01b600052602260045260246000fd5b50919050565b608051614df3620002316000396000818161034c0152818161161a01526122910152614df36000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c8063bc3b2b121161017b578063d936547e116100d8578063f3191a461161008c578063fabcbb7b11610071578063fabcbb7b146107bc578063fadb574d146107cf578063fcad7f65146107e257600080fd5b8063f3191a46146107ab578063f4426766146107b457600080fd5b8063e3684e39116100bd578063e3684e391461070d578063e481b2651461076d578063e70b9e271461078057600080fd5b8063d936547e14610691578063e0b117ff146106b457600080fd5b8063c0aa0e8a1161012f578063c9b67af511610114578063c9b67af514610663578063d2390aa21461066b578063d6db4df81461067e57600080fd5b8063c0aa0e8a146105f2578063c3e0fb1c1461063b57600080fd5b8063be399be511610160578063be399be5146105b9578063bf7e214f146105cc578063c0680e20146105df57600080fd5b8063bc3b2b121461051c578063bcb29667146105a657600080fd5b80637fd7d062116102295780639b74611e116101dd578063b1283e77116101c2578063b1283e7714610472578063bb6e75de146104e9578063bbfe3a321461050957600080fd5b80639b74611e14610431578063a42206101461045f57600080fd5b80638f0fa2441161020e5780638f0fa244146103f85780639a0fae9b1461040b5780639b19251a1461041e57600080fd5b80637fd7d062146103d25780638bbe02c7146103e557600080fd5b80635e6f6045116102805780636e5656b7116102655780636e5656b71461039957806374351f48146103ac5780637a9e5e4b146103bf57600080fd5b80635e6f6045146103475780636a6c575d1461038657600080fd5b80631885f580116102b15780631885f5801461030857806327507458146103115780633adec5a71461033457600080fd5b80630a9d85eb146102cd5780630aebeb4e146102f3575b600080fd5b6102e06102db36600461438e565b6107f5565b6040519081526020015b60405180910390f35b61030661030136600461438e565b61083c565b005b6102e0600b5481565b61032461031f36600461438e565b610958565b60405190151581526020016102ea565b6102e061034236600461438e565b6109cc565b61036e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ea565b6102e06103943660046143a7565b610a80565b6103066103a73660046143d7565b610b71565b6102e06103ba36600461438e565b610c34565b6103066103cd366004614409565b610d43565b6103066103e03660046144ba565b610e39565b6102e06103f3366004614559565b610fa4565b6102e0610406366004614559565b610fd5565b6102e0610419366004614585565b610ff1565b61030661042c366004614409565b611278565b61044461043f36600461461b565b61134d565b604080519384526020840192909252908201526060016102ea565b6102e061046d366004614559565b611a4f565b61048561048036600461438e565b611d0d565b604080516001600160a01b039c8d1681529a8c1660208c015298909a16978901979097529415156060880152921515608087015260a086019190915260c085015260e0840152610100830152610120820152610140810191909152610160016102ea565b6104fc6104f73660046143a7565b611d86565b6040516102ea91906146b5565b6104fc6105173660046146f9565b611e6d565b61056e61052a36600461438e565b6003602052600090815260409020546001600160801b0381169065ffffffffffff600160801b8204811691600160b01b81049091169060ff600160e01b9091041684565b604080516001600160801b0395909516855265ffffffffffff93841660208601529190921690830152151560608201526080016102ea565b6102e06105b436600461438e565b611f33565b6103066105c7366004614409565b612014565b600a5461036e906001600160a01b031681565b6102e06105ed366004614559565b612021565b61060561060036600461438e565b61203d565b6040805195865260208601949094529115159284019290925265ffffffffffff918216606084015216608082015260a0016102ea565b61064e610649366004614559565b612090565b604080519283529015156020830152016102ea565b6104fc61216c565b610306610679366004614732565b612181565b61030661068c366004614559565b61230b565b61032461069f366004614409565b600e6020526000908152604090205460ff1681565b6106c76106c2366004614559565b6123cd565b6040805196875265ffffffffffff958616602088015293851693860193909352908316606085015290911660808301526001600160a01b031660a082015260c0016102ea565b61072061071b36600461438e565b612441565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff92831660a08301529190911660c082015260e0016102ea565b6104fc61077b366004614409565b6124a9565b6102e061078e3660046146f9565b600d60209081526000928352604080842090915290825290205481565b6102e0600c5481565b6103066126e7565b6102e06107ca3660046148ec565b61279f565b6103246107dd36600461438e565b612f28565b6104fc6107f036600461499d565b612fe6565b6000806108018361320d565b505090508060018481548110610819576108196149e8565b9060005260206000209060030201600001546108359190614a14565b9392505050565b6000818154811061084f5761084f6149e8565b60009182526020909120600990910201546001600160a01b031633146108bc5760405162461bcd60e51b815260206004820152600c60248201527f4f6e6c792063726561746f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b42600182815481106108d0576108d06149e8565b906000526020600020906003020160020160076101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000808281548110610917576109176149e8565b6000918252602082206003600990920201019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b600080828154811061096c5761096c6149e8565b9060005260206000209060090201600301546000141580156109c65750426001838154811061099d5761099d6149e8565b6000918252602090912060039091020160020154670100000000000000900465ffffffffffff16115b92915050565b600080600283815481106109e2576109e26149e8565b600091825260209091200154610a0390600160f01b900460ff16600a614b0f565b610a0c84611f33565b610a15856107f5565b610a1f9190614b1e565b610a299190614b53565b905060008381548110610a3e57610a3e6149e8565b90600052602060002090600902016005015481116109c65760008381548110610a6957610a696149e8565b906000526020600020906009020160050154610835565b60008060028381548110610a9657610a966149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041660c08201819052909150610b2790600a614b0f565b610b30846109cc565b60a0830151610b40906002614b67565b610b4b90600a614b0f565b610b559087614b1e565b610b5f9190614b53565b610b699190614b53565b949350505050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190614b88565b6001600160a01b0316336001600160a01b031614600990610c1c5760405162461bcd60e51b81526004016108b39190614ba5565b508015610c2b576000600b5550565b6000600c555b50565b60008060028381548110610c4a57610c4a6149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a08401819052600160f81b9092041660c0830152909150610cdb90600a614b0f565b6002610ce6856109cc565b60c0840151610cf690600a614b0f565b60008781548110610d0957610d096149e8565b906000526020600020906009020160060154610d259190614b1e565b610d2f9190614b1e565b610d399190614b53565b6108359190614b1e565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190614b88565b6001600160a01b0316336001600160a01b031614600990610dee5760405162461bcd60e51b81526004016108b39190614ba5565b50600a80546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60005b8151811015610fa057336000908152600d6020526040812083518290859085908110610e6a57610e6a6149e8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205490506000600d6000336001600160a01b03166001600160a01b031681526020019081526020016000206000858581518110610ed057610ed06149e8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550828281518110610f0e57610f0e6149e8565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190614c4d565b50508080610f9890614c6a565b915050610e3c565b5050565b60046020528160005260406000208181548110610fc057600080fd5b90600052602060002001600091509150505481565b60066020528160005260406000208181548110610fc057600080fd5b600080610ffe8787611e6d565b905060606000805b83518110156111f05760006001858381518110611025576110256149e8565b60200260200101518154811061103d5761103d6149e8565b600091825260208083206040805160a08101825260039094029091018054845260018101549284019290925260029091015460ff8116151591830182905265ffffffffffff6101008204811660608501526701000000000000009091041660808301529092506110b957816060015165ffffffffffff166110d0565b60608201516110d09065ffffffffffff1642614c85565b9050878111156111225760405162461bcd60e51b815260206004820152600a60248201527f426164206578706972790000000000000000000000000000000000000000000060448201526064016108b3565b6000868481518110611136576111366149e8565b60200260200101518154811061114e5761114e6149e8565b9060005260206000209060090201600601548911156111ad5761118a8a87858151811061117d5761117d6149e8565b6020026020010151610a80565b85858151811061119c5761119c6149e8565b6020026020010181815250506111ce565b60008585815181106111c1576111c16149e8565b6020026020010181815250505b836111d881614c6a565b945050505080806111e890614c6a565b915050611006565b506000805b835181101561126a5781848281518110611211576112116149e8565b6020026020010151111561125857838181518110611231576112316149e8565b6020026020010151915084818151811061124d5761124d6149e8565b602002602001015195505b8061126281614c6a565b9150506111f5565b505050505095945050505050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614b88565b6001600160a01b0316336001600160a01b0316146009906113235760405162461bcd60e51b81526004016108b39190614ba5565b506001600160a01b03166000908152600e60205260409020805460ff19811660ff90911615179055565b60008060008060008765ffffffffffff168154811061136e5761136e6149e8565b90600052602060002090600902019050600060018865ffffffffffff168154811061139b5761139b6149e8565b600091825260208083206040805160a08101825260039094029091018054845260018101549284019290925260029091015460ff811615159183019190915265ffffffffffff610100820481166060840152670100000000000000909104811660808301529092504291908190611414908c1684613303565b9050836080015165ffffffffffff168365ffffffffffff16106114795760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016108b3565b60028b65ffffffffffff1681548110611494576114946149e8565b6000918252602090912001546114b590600160f81b900460ff16600a614b0f565b8160028d65ffffffffffff16815481106114d1576114d16149e8565b6000918252602090912001546114f290600160f01b900460ff166002614b67565b6114fd90600a614b0f565b8c516115099190614b1e565b6115139190614b53565b61151d9190614b53565b975084600601548811156115735760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016108b3565b60208a01518810156115c75760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a204c657373207468616e206d696e206f757400000060448201526064016108b3565b836040015180156115e25750606084015165ffffffffffff16155b8061160657508360400151158015611606575042846060015165ffffffffffff1611155b1561161857885160009750915061182e565b7f00000000000000000000000000000000000000000000000000000000000000009150836040015161164e57836060015161165e565b82846060015161165e9190614c9d565b89516001600160a01b0316600090815260076020819052604082205465ffffffffffff9390931699509197508a8160200201516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808a81526020014265ffffffffffff1681526020018965ffffffffffff168152602001600065ffffffffffff1681526020018d65ffffffffffff1681526020018760010160009054906101000a90046001600160a01b03166001600160a01b031681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160010160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505b6002850154600160a81b900460ff16611847578761184a565b89515b85600301600082825461185d9190614a14565b90915550508951600886018054600090611878908490614c85565b92505081905550878560070160008282546118939190614c85565b92505081905550878560040160008282546118ae9190614c85565b90915550508951604080519182526020820183905265ffffffffffff8d16917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a28460040154846020015110156119465760006003860181905560405165ffffffffffff8d16917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611959565b6119598b65ffffffffffff1684836135a3565b60028501548a5160208b015161197d92600160a01b900460ff16918e918c90613a99565b6119c1828960008e65ffffffffffff168154811061199d5761199d6149e8565b60009182526020909120600160099092020101546001600160a01b03169190613d47565b611a413360008d65ffffffffffff16815481106119e0576119e06149e8565b600091825260208220600990910201546001600160a01b0316908d90602002015160008f65ffffffffffff1681548110611a1c57611a1c6149e8565b60009182526020909120600260099092020101546001600160a01b0316929190613e77565b505050505093509350939050565b6001600160a01b0382811660009081526008602090815260408083208584529091528120549091163314611ac55760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016108b3565b6001600160a01b0383166000908152600760205260409020805483908110611aef57611aef6149e8565b6000918252602090912060039091020160010154600160601b900465ffffffffffff1615611b5f5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016108b3565b503360009081526007602052604080822080546001600160a01b038616845291909220805491929184908110611b9757611b976149e8565b6000918252602080832084546001818101875595855282852060039485029092018054919094029091019081558483018054958201805465ffffffffffff19811665ffffffffffff98891690811783558354600160301b908190048a16026bffffffffffffffffffffffff1990921617178082558254600160601b9081900489160271ffffffffffff000000000000000000000000198216811783559254600160901b9081900490981690970265ffffffffffff60901b1990921677ffffffffffffffffffffffff0000000000000000000000001990971696909617179094556002918201549190930180546001600160a01b0319166001600160a01b0392831617905585168152600790915260409020805483908110611cba57611cba6149e8565b6000918252602082206003909102019081556001810180547fffffffffffffffff00000000000000000000000000000000000000000000000016905560020180546001600160a01b031916905592915050565b60008181548110611d1d57600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b039788169950958716979685169660ff600160a01b8704811697600160a81b90970416958b565b60606000835b83811015611dc257611d9d81610958565b15611db05781611dac81614c6a565b9250505b80611dba81614c6a565b915050611d8c565b5060008167ffffffffffffffff811115611dde57611dde614426565b604051908082528060200260200182016040528015611e07578160200160208202803683370190505b5090506000855b85811015611e6257611e1f81610958565b15611e505780838381518110611e3757611e376149e8565b602090810291909101015281611e4c81614c6a565b9250505b80611e5a81614c6a565b915050611e0e565b509095945050505050565b60606000611e7e6000600185612fe6565b905060606000805b8351811015611e6257866001600160a01b03166000858381518110611ead57611ead6149e8565b602002602001015181548110611ec557611ec56149e8565b60009182526020909120600260099092020101546001600160a01b03161415611f2157838181518110611efa57611efa6149e8565b6020026020010151838381518110611f1457611f146149e8565b6020026020010181815250505b80611f2b81614c6a565b915050611e86565b60008060028381548110611f4957611f496149e8565b90600052602060002001600001600c9054906101000a900465ffffffffffff1665ffffffffffff1660028481548110611f8457611f846149e8565b600091825260209091200154611fa990600160301b900465ffffffffffff1642614a14565b60008581548110611fbc57611fbc6149e8565b906000526020600020906009020160040154611fd89190614b1e565b611fe29190614b53565b90508060008481548110611ff857611ff86149e8565b9060005260206000209060090201600401546108359190614a14565b610c3181610679836124a9565b60056020528160005260406000208181548110610fc057600080fd5b6001818154811061204d57600080fd5b600091825260209091206003909102018054600182015460029092015490925060ff81169065ffffffffffff610100820481169167010000000000000090041685565b6001600160a01b0382166000908152600760205260408120805482918291859081106120be576120be6149e8565b60009182526020918290206040805160c08101825260039093029091018054808452600182015465ffffffffffff80821696860196909652600160301b8104861693850193909352600160601b8304851660608501819052600160901b9093049094166080840152600201546001600160a01b031660a08301529194509150158015612156575042816040015165ffffffffffff1611155b80156121625750805115155b9150509250929050565b6000805460609161217c91611d86565b905090565b4260005b8251811015612305576001600160a01b038416600090815260076020526040812084518590849081106121ba576121ba6149e8565b6020026020010151815481106121d2576121d26149e8565b600091825260208220600391909102016001810154909250600160601b900465ffffffffffff1615801561221a5750600182015442600160301b90910465ffffffffffff1611155b80156122265750815415155b905080156122f05760018201805471ffffffffffff0000000000000000000000001916600160601b65ffffffffffff871602179055600282015482546040516317d5759960e31b81526001600160a01b039283166004820152888316602482015260448101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063beabacc890606401600060405180830381600087803b1580156122d757600080fd5b505af11580156122eb573d6000803e3d6000fd5b505050505b505080806122fd90614c6a565b915050612185565b50505050565b33600090815260076020526040902080548290811061232c5761232c6149e8565b600091825260209091206001600390920201015465ffffffffffff166123945760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016108b3565b3360009081526008602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b600760205281600052604060002081815481106123e957600080fd5b600091825260209091206003909102018054600182015460029092015490935065ffffffffffff8083169350600160301b8304811692600160601b8104821692600160901b909104909116906001600160a01b031686565b6002818154811061245157600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b828210156125665760008481526020908190206040805160c081018252600386029092018054835260018082015465ffffffffffff80821686880152600160301b8204811694860194909452600160601b810484166060860152600160901b90049092166080840152600201546001600160a01b031660a083015290835290920191016124de565b505050509050600080600090505b82518110156125f55782818151811061258f5761258f6149e8565b60200260200101516060015165ffffffffffff1660001480156125d057508281815181106125bf576125bf6149e8565b602002602001015160000151600014155b156125e357816125df81614c6a565b9250505b806125ed81614c6a565b915050612574565b508067ffffffffffffffff81111561260f5761260f614426565b604051908082528060200260200182016040528015612638578160200160208202803683370190505b5092506000805b83518110156126de5783818151811061265a5761265a6149e8565b60200260200101516060015165ffffffffffff16600014801561269b575083818151811061268a5761268a6149e8565b602002602001015160000151600014155b156126cc57808583815181106126b3576126b36149e8565b6020908102919091010152816126c881614c6a565b9250505b806126d681614c6a565b91505061263f565b50505050919050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561273a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275e9190614b88565b6001600160a01b0316336001600160a01b0316146009906127925760405162461bcd60e51b81526004016108b39190614ba5565b506003600c55601e600b55565b6040840151602085015160009111156128065760405162461bcd60e51b8152602060048201526024808201527f43726561746f723a206d696e207072696365206d757374206265203e20696e696044820152631d1a585b60e21b60648201526084016108b3565b506000805486516001600160a01b03908116835260046020908152604080852080546001808201835591875283872001859055828b0180518516875260058452828720805480840182559088528488200186905533875260068452828720805492830181558752958390200184905589519451898301518884015183519786168852919094169286019290925284019190915260608301529081907fc983f5286f433c36d6f24f4fda9749b373987ca1e2826ab14e6add4d36406cc09060800160405180910390a260208301516000906128e1904290614a14565b90506000878160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294d9190614cc7565b60ff169050600088600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bd9190614cc7565b60ff16905060026040518060e001604052804265ffffffffffff1681526020014265ffffffffffff1681526020018565ffffffffffff16815260200187600060028110612a0c57612a0c6149e8565b6020908102919091015163ffffffff908116835289820151168282015260ff86811660408085019190915286821660609485015285546001810187556000968752838720865191018054948701519287015195870151608088015160a089015160c0909901518616600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff99909616600160f01b027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff928316600160c01b02167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff938316600160901b0265ffffffffffff60901b199a8416600160601b029a909a1677ffffffffffffffffffffffff00000000000000000000000019978416600160301b026bffffffffffffffffffffffff19909a16939096169290921797909717949094169290921795909517161791909117929092169190911790558751612b81578851612bc7565b612b8c82600a614cea565b60208a0151612b9c856002614b1e565b612ba790600a614cea565b8b51612bb39190614b1e565b612bbd9190614b53565b612bc79190614b53565b86519091506000908590612be19063ffffffff1684614b1e565b612beb9190614b53565b60408051610160810182523381528d516001600160a01b031660208201529192506000919081018d600160200201516001600160a01b031681526020016000151581526020018b600060028110612c4457612c446149e8565b6020020151151581526020018c600060048110612c6357612c636149e8565b602002015181526020018481526020018c600260048110612c8657612c866149e8565b602090810291909101518252818101859052600060408084018290526060938401829052855460018082018855968352838320865160099092020180546001600160a01b03199081166001600160a01b0393841617825594870151978101805490951697821697909717909355840151600286018054868601516080880151939095167fffffffffffffffffffffff00000000000000000000000000000000000000000090911617600160a01b94151594909402939093177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b911515919091021790915560a0830151600385015560c0830151600485015560e083015160058501556101008301516006850155610120830151600785015561014090920151600890930192909255908b0151620186a090612dc79085614b1e565b612dd19190614b53565b612ddb9084614c85565b9050600083612deb87600a614cea565b60208e0151612dfa9190614b1e565b612e049190614b53565b905060016040518060a001604052808381526020018481526020018d600160028110612e3257612e326149e8565b6020020151151581526020018c600060028110612e5157612e516149e8565b602002015165ffffffffffff1681526020018c600160028110612e7657612e766149e8565b6020908102919091015165ffffffffffff9081169092528354600181810186556000958652948290208451600390920201908155908301519381019390935560408201516002909301805460608401516080909401518316670100000000000000026cffffffffffff0000000000000019949093166101000266ffffffffffff00199515159590951666ffffffffffffff1990911617939093179190911617905550959b9a5050505050505050505050565b60008060018381548110612f3e57612f3e6149e8565b60009182526020918290206040805160a08101825260039093029091018054835260018101549383019390935260029092015460ff811615801593830184905265ffffffffffff6101008304811660608501526701000000000000009092049091166080830152909250612fbc5750606081015165ffffffffffff16155b8061083557508060400151158015610835575042816060015165ffffffffffff1611159392505050565b6060808415613059576001600160a01b0383166000908152600660209081526040918290208054835181840281018401909452808452909183018282801561304d57602002820191906000526020600020905b815481526020019060010190808311613039575b505050505090506130e6565b8361307b576001600160a01b0383166000908152600560205260409020613094565b6001600160a01b03831660009081526004602052604090205b8054806020026020016040519081016040528092919081815260200182805480156130de57602002820191906000526020600020905b8154815260200190600101908083116130ca575b505050505090505b6000805b825181101561313a57613115838281518110613108576131086149e8565b6020026020010151610958565b15613128578161312481614c6a565b9250505b8061313281614c6a565b9150506130ea565b5060008167ffffffffffffffff81111561315657613156614426565b60405190808252806020026020018201604052801561317f578160200160208202803683370190505b5090506000805b8451811015613200576131a4858281518110613108576131086149e8565b156131ee578481815181106131bb576131bb6149e8565b60200260200101518383815181106131d5576131d56149e8565b6020908102919091010152816131ea81614c6a565b9250505b806131f881614c6a565b915050613186565b5090979650505050505050565b6000818152600360209081526040808320815160808101835290546001600160801b0381168252600160801b810465ffffffffffff90811694830194909452600160b01b810490931691810191909152600160e01b90910460ff161515606082018190528291829161328a576000806000935093509350506132fc565b60208101516132999042614cf6565b9250806040015165ffffffffffff168365ffffffffffff16109150816132c05780516132ef565b806040015165ffffffffffff168365ffffffffffff1682600001516132e59190614d1d565b6132ef9190614d4c565b6001600160801b03169350505b9193909250565b600061330e83613fb0565b60008481548110613321576133216149e8565b906000526020600020906009020160040160008282546133419190614a14565b92505081905550816002848154811061335c5761335c6149e8565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff00000000000019909416939093179092558481526003909152604090205460ff600160e01b90910416156134fa5760008381526003602052604081209080806133cb8761320d565b92509250925082600188815481106133e5576133e56149e8565b906000526020600020906003020160000160008282546134059190614a14565b909155505080156134ce5783548390859060009061342d9084906001600160801b0316614d72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550818460000160168282829054906101000a900465ffffffffffff166134769190614cf6565b82546101009290920a65ffffffffffff81810219909316918316021790915585547fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff16600160801b91891691909102178555506134f5565b83547fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff1684555b505050505b61350383614091565b90506000808481548110613519576135196149e8565b90600052602060002090600902016005015490508082101561359c5781816000868154811061354a5761354a6149e8565b9060005260206000209060090201600401546135669190614b1e565b6135709190614b53565b60008581548110613583576135836149e8565b9060005260206000209060090201600401819055508091505b5092915050565b6000600284815481106135b8576135b86149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b90930490921660c0820152925061364991614c9d565b65ffffffffffff168365ffffffffffff1610612305576000808581548110613673576136736149e8565b600091825260208083206040805161016081018252600990940290910180546001600160a01b03908116855260018083015482169486019490945260028201549081169285019290925260ff600160a01b8304811615156060860152600160a81b90920490911615156080840152600381015460a0840152600481015460c0840152600581015460e084015260068101546101008401526007810154610120840152600801546101408301528054919350869188908110613736576137366149e8565b906000526020600020906003020160020160079054906101000a900465ffffffffffff166137649190614cf6565b65ffffffffffff16905060008260800151613783578260a001516137d3565b60c084015161379390600a614b0f565b858560a0015160026137a59190614b67565b6137b090600a614b0f565b8560a001516137bf9190614b1e565b6137c99190614b53565b6137d39190614b53565b905081846060015165ffffffffffff16826137ee9190614b1e565b6137f89190614b53565b6000888154811061380b5761380b6149e8565b906000526020600020906009020160060181905550600082856040015165ffffffffffff168361383b9190614b1e565b6138459190614b53565b90506000818660a00151600a61385b9190614b0f565b6138659089614b1e565b61386f9190614b53565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d160018b815481106138a6576138a66149e8565b600091825260209182902060039091020154604080519182529181018590520160405180910390a2600189815481106138e1576138e16149e8565b9060005260206000209060030201600001548110613923578060018a8154811061390d5761390d6149e8565b6000918252602090912060039091020155613a53565b60008160018b81548110613939576139396149e8565b9060005260206000209060030201600001546139559190614a14565b90506040518060800160405280826001600160801b031681526020018a65ffffffffffff168152602001886080015165ffffffffffff16815260200160011515815250600360008c815260200190815260200160002060008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160166101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600001601c6101000a81548160ff021916908315150217905550905050505b8760028a81548110613a6757613a676149e8565b6000918252602090912001805465ffffffffffff191665ffffffffffff92909216919091179055505050505050505050565b6000808565ffffffffffff1681548110613ab557613ab56149e8565b600091825260208220600160099092020101546001600160a01b03169150613ade828585614125565b90508615613ce9576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b519190614d92565b905060008765ffffffffffff1681548110613b6e57613b6e6149e8565b60009182526020909120600990910201546001600160a01b031663a54efcd08888613b99868a614c85565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815265ffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b158015613bfe57600080fd5b505af1158015613c12573d6000803e3d6000fd5b50505050818582613c239190614c85565b613c2d9190614c85565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c959190614d92565b1015613ce35760405162461bcd60e51b815260206004820152601660248201527f4465706f7369746f72793a206e6f742066756e6465640000000000000000000060448201526064016108b3565b50613d3e565b613d3e60008765ffffffffffff1681548110613d0757613d076149e8565b60009182526020909120600990910201546001600160a01b031630613d2c8488614c85565b6001600160a01b038616929190613e77565b50505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691613db89190614dab565b6000604051808303816000865af19150503d8060008114613df5576040519150601f19603f3d011682016040523d82523d6000602084013e613dfa565b606091505b5091509150818015613e24575080511580613e24575080806020019051810190613e249190614c4d565b613e705760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016108b3565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790529151600092839290881691613ef09190614dab565b6000604051808303816000865af19150503d8060008114613f2d576040519150601f19603f3d011682016040523d82523d6000602084013e613f32565b606091505b5091509150818015613f5c575080511580613f5c575080806020019051810190613f5c9190614c4d565b613fa85760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108b3565b505050505050565b60008060028381548110613fc657613fc66149e8565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b9091041660c08301529092506140529042614a14565b9050816040015165ffffffffffff168160008681548110614075576140756149e8565b906000526020600020906009020160040154610b5f9190614b1e565b6000600282815481106140a6576140a66149e8565b6000918252602090912001546140c790600160f01b900460ff16600a614b0f565b600083815481106140da576140da6149e8565b906000526020600020906009020160040154600184815481106140ff576140ff6149e8565b90600052602060002090600302016000015461411b9190614b1e565b6109c69190614b53565b600080612710600b54856141399190614b1e565b6141439190614b53565b90506000612710600c54866141589190614b1e565b6141629190614b53565b6001600160a01b0385166000908152600e602052604090205490915060ff161561429d576001600160a01b038085166000908152600d60209081526040808320938a16835292905290812080548392906141bd908490614c85565b9250508190555081600d6000600a60009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa15801561421c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142409190614b88565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546142929190614c85565b9091555061437a9050565b6142a78183614c85565b600d6000600a60009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143229190614b88565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546143749190614c85565b90915550505b6143848183614c85565b9695505050505050565b6000602082840312156143a057600080fd5b5035919050565b600080604083850312156143ba57600080fd5b50508035926020909101359150565b8015158114610c3157600080fd5b6000602082840312156143e957600080fd5b8135610835816143c9565b6001600160a01b0381168114610c3157600080fd5b60006020828403121561441b57600080fd5b8135610835816143f4565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561445f5761445f614426565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561448e5761448e614426565b604052919050565b600067ffffffffffffffff8211156144b0576144b0614426565b5060051b60200190565b600060208083850312156144cd57600080fd5b823567ffffffffffffffff8111156144e457600080fd5b8301601f810185136144f557600080fd5b803561450861450382614496565b614465565b81815260059190911b8201830190838101908783111561452757600080fd5b928401925b8284101561454e57833561453f816143f4565b8252928401929084019061452c565b979650505050505050565b6000806040838503121561456c57600080fd5b8235614577816143f4565b946020939093013593505050565b600080600080600060a0868803121561459d57600080fd5b85356145a8816143f4565b945060208601356145b8816143f4565b94979496505050506040830135926060810135926080909101359150565b600082601f8301126145e757600080fd5b6145ef61443c565b80604084018581111561460157600080fd5b845b81811015611e62578035845260209384019301614603565b600080600060a0848603121561463057600080fd5b833565ffffffffffff8116811461464657600080fd5b92506020614656868683016145d6565b925085607f86011261466757600080fd5b61466f61443c565b8060a087018881111561468157600080fd5b606088015b818110156146a6578035614699816143f4565b8452928401928401614686565b50508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156146ed578351835292840192918401916001016146d1565b50909695505050505050565b6000806040838503121561470c57600080fd5b8235614717816143f4565b91506020830135614727816143f4565b809150509250929050565b6000806040838503121561474557600080fd5b8235614750816143f4565b915060208381013567ffffffffffffffff81111561476d57600080fd5b8401601f8101861361477e57600080fd5b803561478c61450382614496565b81815260059190911b820183019083810190888311156147ab57600080fd5b928401925b828410156147c9578335825292840192908401906147b0565b80955050505050509250929050565b600082601f8301126147e957600080fd5b6040516080810181811067ffffffffffffffff8211171561480c5761480c614426565b60405280608084018581111561482157600080fd5b845b8181101561483b578035835260209283019201614823565b509195945050505050565b600082601f83011261485757600080fd5b61485f61443c565b80604084018581111561487157600080fd5b845b81811015611e62578035614886816143c9565b845260209384019301614873565b600082601f8301126148a557600080fd5b6148ad61443c565b8060408401858111156148bf57600080fd5b845b81811015611e6257803563ffffffff811681146148de5760008081fd5b8452602093840193016148c1565b6000806000806000610180868803121561490557600080fd5b86601f87011261491457600080fd5b61491c61443c565b80604088018981111561492e57600080fd5b885b81811015614951578035614943816143f4565b845260209384019301614930565b5081975061495f8a826147d8565b96505050506149718760c08801614846565b92506149818761010088016145d6565b9150614991876101408801614894565b90509295509295909350565b6000806000606084860312156149b257600080fd5b83356149bd816143c9565b925060208401356149cd816143c9565b915060408401356149dd816143f4565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614a2657614a266149fe565b500390565b600181815b80851115614a66578160001904821115614a4c57614a4c6149fe565b80851615614a5957918102915b93841c9390800290614a30565b509250929050565b600082614a7d575060016109c6565b81614a8a575060006109c6565b8160018114614aa05760028114614aaa57614ac6565b60019150506109c6565b60ff841115614abb57614abb6149fe565b50506001821b6109c6565b5060208310610133831016604e8410600b8410161715614ae9575081810a6109c6565b614af38383614a2b565b8060001904821115614b0757614b076149fe565b029392505050565b600061083560ff841683614a6e565b6000816000190483118215151615614b3857614b386149fe565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614b6257614b62614b3d565b500490565b600060ff821660ff84168160ff0481118215151615614b0757614b076149fe565b600060208284031215614b9a57600080fd5b8151610835816143f4565b600060208083526000845481600182811c915080831680614bc757607f831692505b858310811415614be557634e487b7160e01b85526022600452602485fd5b878601838152602001818015614c025760018114614c1357614c3e565b60ff19861682528782019650614c3e565b60008b81526020902060005b86811015614c3857815484820152908501908901614c1f565b83019750505b50949998505050505050505050565b600060208284031215614c5f57600080fd5b8151610835816143c9565b6000600019821415614c7e57614c7e6149fe565b5060010190565b60008219821115614c9857614c986149fe565b500190565b600065ffffffffffff808316818516808303821115614cbe57614cbe6149fe565b01949350505050565b600060208284031215614cd957600080fd5b815160ff8116811461083557600080fd5b60006108358383614a6e565b600065ffffffffffff83811690831681811015614d1557614d156149fe565b039392505050565b60006001600160801b0380831681851681830481118215151615614d4357614d436149fe565b02949350505050565b60006001600160801b0380841680614d6657614d66614b3d565b92169190910492915050565b60006001600160801b0383811690831681811015614d1557614d156149fe565b600060208284031215614da457600080fd5b5051919050565b6000825160005b81811015614dcc5760208186018101518583015201614db2565b81811115614ddb576000828501525b50919091019291505056fea164736f6c634300080a000a60a060405234801561001057600080fd5b50336080526080516101ef61002f6000396000605d01526101ef6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063beabacc814610030575b600080fd5b61004361003e36600461017d565b610045565b005b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100ce5760405162461bcd60e51b815260206004820152601860248201527f56657374696e673a204f6e6c79206465706f7369746f72790000000000000000604482015260640160405180910390fd5b60405163a9059cbb60e01b815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561012a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014e91906101b9565b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461017857600080fd5b919050565b60008060006060848603121561019257600080fd5b61019b84610154565b92506101a960208501610154565b9150604084013590509250925092565b6000602082840312156101cb57600080fd5b815180151581146101db57600080fd5b939250505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c8063bc3b2b121161017b578063d936547e116100d8578063f3191a461161008c578063fabcbb7b11610071578063fabcbb7b146107bc578063fadb574d146107cf578063fcad7f65146107e257600080fd5b8063f3191a46146107ab578063f4426766146107b457600080fd5b8063e3684e39116100bd578063e3684e391461070d578063e481b2651461076d578063e70b9e271461078057600080fd5b8063d936547e14610691578063e0b117ff146106b457600080fd5b8063c0aa0e8a1161012f578063c9b67af511610114578063c9b67af514610663578063d2390aa21461066b578063d6db4df81461067e57600080fd5b8063c0aa0e8a146105f2578063c3e0fb1c1461063b57600080fd5b8063be399be511610160578063be399be5146105b9578063bf7e214f146105cc578063c0680e20146105df57600080fd5b8063bc3b2b121461051c578063bcb29667146105a657600080fd5b80637fd7d062116102295780639b74611e116101dd578063b1283e77116101c2578063b1283e7714610472578063bb6e75de146104e9578063bbfe3a321461050957600080fd5b80639b74611e14610431578063a42206101461045f57600080fd5b80638f0fa2441161020e5780638f0fa244146103f85780639a0fae9b1461040b5780639b19251a1461041e57600080fd5b80637fd7d062146103d25780638bbe02c7146103e557600080fd5b80635e6f6045116102805780636e5656b7116102655780636e5656b71461039957806374351f48146103ac5780637a9e5e4b146103bf57600080fd5b80635e6f6045146103475780636a6c575d1461038657600080fd5b80631885f580116102b15780631885f5801461030857806327507458146103115780633adec5a71461033457600080fd5b80630a9d85eb146102cd5780630aebeb4e146102f3575b600080fd5b6102e06102db36600461438e565b6107f5565b6040519081526020015b60405180910390f35b61030661030136600461438e565b61083c565b005b6102e0600b5481565b61032461031f36600461438e565b610958565b60405190151581526020016102ea565b6102e061034236600461438e565b6109cc565b61036e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102ea565b6102e06103943660046143a7565b610a80565b6103066103a73660046143d7565b610b71565b6102e06103ba36600461438e565b610c34565b6103066103cd366004614409565b610d43565b6103066103e03660046144ba565b610e39565b6102e06103f3366004614559565b610fa4565b6102e0610406366004614559565b610fd5565b6102e0610419366004614585565b610ff1565b61030661042c366004614409565b611278565b61044461043f36600461461b565b61134d565b604080519384526020840192909252908201526060016102ea565b6102e061046d366004614559565b611a4f565b61048561048036600461438e565b611d0d565b604080516001600160a01b039c8d1681529a8c1660208c015298909a16978901979097529415156060880152921515608087015260a086019190915260c085015260e0840152610100830152610120820152610140810191909152610160016102ea565b6104fc6104f73660046143a7565b611d86565b6040516102ea91906146b5565b6104fc6105173660046146f9565b611e6d565b61056e61052a36600461438e565b6003602052600090815260409020546001600160801b0381169065ffffffffffff600160801b8204811691600160b01b81049091169060ff600160e01b9091041684565b604080516001600160801b0395909516855265ffffffffffff93841660208601529190921690830152151560608201526080016102ea565b6102e06105b436600461438e565b611f33565b6103066105c7366004614409565b612014565b600a5461036e906001600160a01b031681565b6102e06105ed366004614559565b612021565b61060561060036600461438e565b61203d565b6040805195865260208601949094529115159284019290925265ffffffffffff918216606084015216608082015260a0016102ea565b61064e610649366004614559565b612090565b604080519283529015156020830152016102ea565b6104fc61216c565b610306610679366004614732565b612181565b61030661068c366004614559565b61230b565b61032461069f366004614409565b600e6020526000908152604090205460ff1681565b6106c76106c2366004614559565b6123cd565b6040805196875265ffffffffffff958616602088015293851693860193909352908316606085015290911660808301526001600160a01b031660a082015260c0016102ea565b61072061071b36600461438e565b612441565b6040805165ffffffffffff98891681529688166020880152948716948601949094529185166060850152909316608083015260ff92831660a08301529190911660c082015260e0016102ea565b6104fc61077b366004614409565b6124a9565b6102e061078e3660046146f9565b600d60209081526000928352604080842090915290825290205481565b6102e0600c5481565b6103066126e7565b6102e06107ca3660046148ec565b61279f565b6103246107dd36600461438e565b612f28565b6104fc6107f036600461499d565b612fe6565b6000806108018361320d565b505090508060018481548110610819576108196149e8565b9060005260206000209060030201600001546108359190614a14565b9392505050565b6000818154811061084f5761084f6149e8565b60009182526020909120600990910201546001600160a01b031633146108bc5760405162461bcd60e51b815260206004820152600c60248201527f4f6e6c792063726561746f72000000000000000000000000000000000000000060448201526064015b60405180910390fd5b42600182815481106108d0576108d06149e8565b906000526020600020906003020160020160076101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000808281548110610917576109176149e8565b6000918252602082206003600990920201019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b600080828154811061096c5761096c6149e8565b9060005260206000209060090201600301546000141580156109c65750426001838154811061099d5761099d6149e8565b6000918252602090912060039091020160020154670100000000000000900465ffffffffffff16115b92915050565b600080600283815481106109e2576109e26149e8565b600091825260209091200154610a0390600160f01b900460ff16600a614b0f565b610a0c84611f33565b610a15856107f5565b610a1f9190614b1e565b610a299190614b53565b905060008381548110610a3e57610a3e6149e8565b90600052602060002090600902016005015481116109c65760008381548110610a6957610a696149e8565b906000526020600020906009020160050154610835565b60008060028381548110610a9657610a966149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a0840152600160f81b9091041660c08201819052909150610b2790600a614b0f565b610b30846109cc565b60a0830151610b40906002614b67565b610b4b90600a614b0f565b610b559087614b1e565b610b5f9190614b53565b610b699190614b53565b949350505050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be89190614b88565b6001600160a01b0316336001600160a01b031614600990610c1c5760405162461bcd60e51b81526004016108b39190614ba5565b508015610c2b576000600b5550565b6000600c555b50565b60008060028381548110610c4a57610c4a6149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b8204811660a08401819052600160f81b9092041660c0830152909150610cdb90600a614b0f565b6002610ce6856109cc565b60c0840151610cf690600a614b0f565b60008781548110610d0957610d096149e8565b906000526020600020906009020160060154610d259190614b1e565b610d2f9190614b1e565b610d399190614b53565b6108359190614b1e565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190614b88565b6001600160a01b0316336001600160a01b031614600990610dee5760405162461bcd60e51b81526004016108b39190614ba5565b50600a80546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b60005b8151811015610fa057336000908152600d6020526040812083518290859085908110610e6a57610e6a6149e8565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205490506000600d6000336001600160a01b03166001600160a01b031681526020019081526020016000206000858581518110610ed057610ed06149e8565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550828281518110610f0e57610f0e6149e8565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190614c4d565b50508080610f9890614c6a565b915050610e3c565b5050565b60046020528160005260406000208181548110610fc057600080fd5b90600052602060002001600091509150505481565b60066020528160005260406000208181548110610fc057600080fd5b600080610ffe8787611e6d565b905060606000805b83518110156111f05760006001858381518110611025576110256149e8565b60200260200101518154811061103d5761103d6149e8565b600091825260208083206040805160a08101825260039094029091018054845260018101549284019290925260029091015460ff8116151591830182905265ffffffffffff6101008204811660608501526701000000000000009091041660808301529092506110b957816060015165ffffffffffff166110d0565b60608201516110d09065ffffffffffff1642614c85565b9050878111156111225760405162461bcd60e51b815260206004820152600a60248201527f426164206578706972790000000000000000000000000000000000000000000060448201526064016108b3565b6000868481518110611136576111366149e8565b60200260200101518154811061114e5761114e6149e8565b9060005260206000209060090201600601548911156111ad5761118a8a87858151811061117d5761117d6149e8565b6020026020010151610a80565b85858151811061119c5761119c6149e8565b6020026020010181815250506111ce565b60008585815181106111c1576111c16149e8565b6020026020010181815250505b836111d881614c6a565b945050505080806111e890614c6a565b915050611006565b506000805b835181101561126a5781848281518110611211576112116149e8565b6020026020010151111561125857838181518110611231576112316149e8565b6020026020010151915084818151811061124d5761124d6149e8565b602002602001015195505b8061126281614c6a565b9150506111f5565b505050505095945050505050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614b88565b6001600160a01b0316336001600160a01b0316146009906113235760405162461bcd60e51b81526004016108b39190614ba5565b506001600160a01b03166000908152600e60205260409020805460ff19811660ff90911615179055565b60008060008060008765ffffffffffff168154811061136e5761136e6149e8565b90600052602060002090600902019050600060018865ffffffffffff168154811061139b5761139b6149e8565b600091825260208083206040805160a08101825260039094029091018054845260018101549284019290925260029091015460ff811615159183019190915265ffffffffffff610100820481166060840152670100000000000000909104811660808301529092504291908190611414908c1684613303565b9050836080015165ffffffffffff168365ffffffffffff16106114795760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064016108b3565b60028b65ffffffffffff1681548110611494576114946149e8565b6000918252602090912001546114b590600160f81b900460ff16600a614b0f565b8160028d65ffffffffffff16815481106114d1576114d16149e8565b6000918252602090912001546114f290600160f01b900460ff166002614b67565b6114fd90600a614b0f565b8c516115099190614b1e565b6115139190614b53565b61151d9190614b53565b975084600601548811156115735760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a6520657863656564656400000060448201526064016108b3565b60208a01518810156115c75760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a204c657373207468616e206d696e206f757400000060448201526064016108b3565b836040015180156115e25750606084015165ffffffffffff16155b8061160657508360400151158015611606575042846060015165ffffffffffff1611155b1561161857885160009750915061182e565b7f00000000000000000000000000000000000000000000000000000000000000009150836040015161164e57836060015161165e565b82846060015161165e9190614c9d565b89516001600160a01b0316600090815260076020819052604082205465ffffffffffff9390931699509197508a8160200201516001600160a01b03166001600160a01b031681526020019081526020016000206040518060c001604052808a81526020014265ffffffffffff1681526020018965ffffffffffff168152602001600065ffffffffffff1681526020018d65ffffffffffff1681526020018760010160009054906101000a90046001600160a01b03166001600160a01b031681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160010160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160010160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505b6002850154600160a81b900460ff16611847578761184a565b89515b85600301600082825461185d9190614a14565b90915550508951600886018054600090611878908490614c85565b92505081905550878560070160008282546118939190614c85565b92505081905550878560040160008282546118ae9190614c85565b90915550508951604080519182526020820183905265ffffffffffff8d16917f7880508a48fd3aee88f7e15917d85e39c3ad059e51ad4aca9bb46e7b4938b961910160405180910390a28460040154846020015110156119465760006003860181905560405165ffffffffffff8d16917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611959565b6119598b65ffffffffffff1684836135a3565b60028501548a5160208b015161197d92600160a01b900460ff16918e918c90613a99565b6119c1828960008e65ffffffffffff168154811061199d5761199d6149e8565b60009182526020909120600160099092020101546001600160a01b03169190613d47565b611a413360008d65ffffffffffff16815481106119e0576119e06149e8565b600091825260208220600990910201546001600160a01b0316908d90602002015160008f65ffffffffffff1681548110611a1c57611a1c6149e8565b60009182526020909120600260099092020101546001600160a01b0316929190613e77565b505050505093509350939050565b6001600160a01b0382811660009081526008602090815260408083208584529091528120549091163314611ac55760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e64000060448201526064016108b3565b6001600160a01b0383166000908152600760205260409020805483908110611aef57611aef6149e8565b6000918252602090912060039091020160010154600160601b900465ffffffffffff1615611b5f5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d65640000000000000060448201526064016108b3565b503360009081526007602052604080822080546001600160a01b038616845291909220805491929184908110611b9757611b976149e8565b6000918252602080832084546001818101875595855282852060039485029092018054919094029091019081558483018054958201805465ffffffffffff19811665ffffffffffff98891690811783558354600160301b908190048a16026bffffffffffffffffffffffff1990921617178082558254600160601b9081900489160271ffffffffffff000000000000000000000000198216811783559254600160901b9081900490981690970265ffffffffffff60901b1990921677ffffffffffffffffffffffff0000000000000000000000001990971696909617179094556002918201549190930180546001600160a01b0319166001600160a01b0392831617905585168152600790915260409020805483908110611cba57611cba6149e8565b6000918252602082206003909102019081556001810180547fffffffffffffffff00000000000000000000000000000000000000000000000016905560020180546001600160a01b031916905592915050565b60008181548110611d1d57600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b039788169950958716979685169660ff600160a01b8704811697600160a81b90970416958b565b60606000835b83811015611dc257611d9d81610958565b15611db05781611dac81614c6a565b9250505b80611dba81614c6a565b915050611d8c565b5060008167ffffffffffffffff811115611dde57611dde614426565b604051908082528060200260200182016040528015611e07578160200160208202803683370190505b5090506000855b85811015611e6257611e1f81610958565b15611e505780838381518110611e3757611e376149e8565b602090810291909101015281611e4c81614c6a565b9250505b80611e5a81614c6a565b915050611e0e565b509095945050505050565b60606000611e7e6000600185612fe6565b905060606000805b8351811015611e6257866001600160a01b03166000858381518110611ead57611ead6149e8565b602002602001015181548110611ec557611ec56149e8565b60009182526020909120600260099092020101546001600160a01b03161415611f2157838181518110611efa57611efa6149e8565b6020026020010151838381518110611f1457611f146149e8565b6020026020010181815250505b80611f2b81614c6a565b915050611e86565b60008060028381548110611f4957611f496149e8565b90600052602060002001600001600c9054906101000a900465ffffffffffff1665ffffffffffff1660028481548110611f8457611f846149e8565b600091825260209091200154611fa990600160301b900465ffffffffffff1642614a14565b60008581548110611fbc57611fbc6149e8565b906000526020600020906009020160040154611fd89190614b1e565b611fe29190614b53565b90508060008481548110611ff857611ff86149e8565b9060005260206000209060090201600401546108359190614a14565b610c3181610679836124a9565b60056020528160005260406000208181548110610fc057600080fd5b6001818154811061204d57600080fd5b600091825260209091206003909102018054600182015460029092015490925060ff81169065ffffffffffff610100820481169167010000000000000090041685565b6001600160a01b0382166000908152600760205260408120805482918291859081106120be576120be6149e8565b60009182526020918290206040805160c08101825260039093029091018054808452600182015465ffffffffffff80821696860196909652600160301b8104861693850193909352600160601b8304851660608501819052600160901b9093049094166080840152600201546001600160a01b031660a08301529194509150158015612156575042816040015165ffffffffffff1611155b80156121625750805115155b9150509250929050565b6000805460609161217c91611d86565b905090565b4260005b8251811015612305576001600160a01b038416600090815260076020526040812084518590849081106121ba576121ba6149e8565b6020026020010151815481106121d2576121d26149e8565b600091825260208220600391909102016001810154909250600160601b900465ffffffffffff1615801561221a5750600182015442600160301b90910465ffffffffffff1611155b80156122265750815415155b905080156122f05760018201805471ffffffffffff0000000000000000000000001916600160601b65ffffffffffff871602179055600282015482546040516317d5759960e31b81526001600160a01b039283166004820152888316602482015260448101919091527f00000000000000000000000000000000000000000000000000000000000000009091169063beabacc890606401600060405180830381600087803b1580156122d757600080fd5b505af11580156122eb573d6000803e3d6000fd5b505050505b505080806122fd90614c6a565b915050612185565b50505050565b33600090815260076020526040902080548290811061232c5761232c6149e8565b600091825260209091206001600390920201015465ffffffffffff166123945760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e6400000000000060448201526064016108b3565b3360009081526008602090815260408083209383529290522080546001600160a01b0319166001600160a01b0392909216919091179055565b600760205281600052604060002081815481106123e957600080fd5b600091825260209091206003909102018054600182015460029092015490935065ffffffffffff8083169350600160301b8304811692600160601b8104821692600160901b909104909116906001600160a01b031686565b6002818154811061245157600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b81049091169060ff600160f01b8204811691600160f81b90041687565b6001600160a01b0381166000908152600760209081526040808320805482518185028101850190935280835260609493849084015b828210156125665760008481526020908190206040805160c081018252600386029092018054835260018082015465ffffffffffff80821686880152600160301b8204811694860194909452600160601b810484166060860152600160901b90049092166080840152600201546001600160a01b031660a083015290835290920191016124de565b505050509050600080600090505b82518110156125f55782818151811061258f5761258f6149e8565b60200260200101516060015165ffffffffffff1660001480156125d057508281815181106125bf576125bf6149e8565b602002602001015160000151600014155b156125e357816125df81614c6a565b9250505b806125ed81614c6a565b915050612574565b508067ffffffffffffffff81111561260f5761260f614426565b604051908082528060200260200182016040528015612638578160200160208202803683370190505b5092506000805b83518110156126de5783818151811061265a5761265a6149e8565b60200260200101516060015165ffffffffffff16600014801561269b575083818151811061268a5761268a6149e8565b602002602001015160000151600014155b156126cc57808583815181106126b3576126b36149e8565b6020908102919091010152816126c881614c6a565b9250505b806126d681614c6a565b91505061263f565b50505050919050565b600a60009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561273a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275e9190614b88565b6001600160a01b0316336001600160a01b0316146009906127925760405162461bcd60e51b81526004016108b39190614ba5565b506003600c55601e600b55565b6040840151602085015160009111156128065760405162461bcd60e51b8152602060048201526024808201527f43726561746f723a206d696e207072696365206d757374206265203e20696e696044820152631d1a585b60e21b60648201526084016108b3565b506000805486516001600160a01b03908116835260046020908152604080852080546001808201835591875283872001859055828b0180518516875260058452828720805480840182559088528488200186905533875260068452828720805492830181558752958390200184905589519451898301518884015183519786168852919094169286019290925284019190915260608301529081907fc983f5286f433c36d6f24f4fda9749b373987ca1e2826ab14e6add4d36406cc09060800160405180910390a260208301516000906128e1904290614a14565b90506000878160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294d9190614cc7565b60ff169050600088600160200201516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bd9190614cc7565b60ff16905060026040518060e001604052804265ffffffffffff1681526020014265ffffffffffff1681526020018565ffffffffffff16815260200187600060028110612a0c57612a0c6149e8565b6020908102919091015163ffffffff908116835289820151168282015260ff86811660408085019190915286821660609485015285546001810187556000968752838720865191018054948701519287015195870151608088015160a089015160c0909901518616600160f81b027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff99909616600160f01b027fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff65ffffffffffff928316600160c01b02167fff00000000000000ffffffffffffffffffffffffffffffffffffffffffffffff938316600160901b0265ffffffffffff60901b199a8416600160601b029a909a1677ffffffffffffffffffffffff00000000000000000000000019978416600160301b026bffffffffffffffffffffffff19909a16939096169290921797909717949094169290921795909517161791909117929092169190911790558751612b81578851612bc7565b612b8c82600a614cea565b60208a0151612b9c856002614b1e565b612ba790600a614cea565b8b51612bb39190614b1e565b612bbd9190614b53565b612bc79190614b53565b86519091506000908590612be19063ffffffff1684614b1e565b612beb9190614b53565b60408051610160810182523381528d516001600160a01b031660208201529192506000919081018d600160200201516001600160a01b031681526020016000151581526020018b600060028110612c4457612c446149e8565b6020020151151581526020018c600060048110612c6357612c636149e8565b602002015181526020018481526020018c600260048110612c8657612c866149e8565b602090810291909101518252818101859052600060408084018290526060938401829052855460018082018855968352838320865160099092020180546001600160a01b03199081166001600160a01b0393841617825594870151978101805490951697821697909717909355840151600286018054868601516080880151939095167fffffffffffffffffffffff00000000000000000000000000000000000000000090911617600160a01b94151594909402939093177fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b911515919091021790915560a0830151600385015560c0830151600485015560e083015160058501556101008301516006850155610120830151600785015561014090920151600890930192909255908b0151620186a090612dc79085614b1e565b612dd19190614b53565b612ddb9084614c85565b9050600083612deb87600a614cea565b60208e0151612dfa9190614b1e565b612e049190614b53565b905060016040518060a001604052808381526020018481526020018d600160028110612e3257612e326149e8565b6020020151151581526020018c600060028110612e5157612e516149e8565b602002015165ffffffffffff1681526020018c600160028110612e7657612e766149e8565b6020908102919091015165ffffffffffff9081169092528354600181810186556000958652948290208451600390920201908155908301519381019390935560408201516002909301805460608401516080909401518316670100000000000000026cffffffffffff0000000000000019949093166101000266ffffffffffff00199515159590951666ffffffffffffff1990911617939093179190911617905550959b9a5050505050505050505050565b60008060018381548110612f3e57612f3e6149e8565b60009182526020918290206040805160a08101825260039093029091018054835260018101549383019390935260029092015460ff811615801593830184905265ffffffffffff6101008304811660608501526701000000000000009092049091166080830152909250612fbc5750606081015165ffffffffffff16155b8061083557508060400151158015610835575042816060015165ffffffffffff1611159392505050565b6060808415613059576001600160a01b0383166000908152600660209081526040918290208054835181840281018401909452808452909183018282801561304d57602002820191906000526020600020905b815481526020019060010190808311613039575b505050505090506130e6565b8361307b576001600160a01b0383166000908152600560205260409020613094565b6001600160a01b03831660009081526004602052604090205b8054806020026020016040519081016040528092919081815260200182805480156130de57602002820191906000526020600020905b8154815260200190600101908083116130ca575b505050505090505b6000805b825181101561313a57613115838281518110613108576131086149e8565b6020026020010151610958565b15613128578161312481614c6a565b9250505b8061313281614c6a565b9150506130ea565b5060008167ffffffffffffffff81111561315657613156614426565b60405190808252806020026020018201604052801561317f578160200160208202803683370190505b5090506000805b8451811015613200576131a4858281518110613108576131086149e8565b156131ee578481815181106131bb576131bb6149e8565b60200260200101518383815181106131d5576131d56149e8565b6020908102919091010152816131ea81614c6a565b9250505b806131f881614c6a565b915050613186565b5090979650505050505050565b6000818152600360209081526040808320815160808101835290546001600160801b0381168252600160801b810465ffffffffffff90811694830194909452600160b01b810490931691810191909152600160e01b90910460ff161515606082018190528291829161328a576000806000935093509350506132fc565b60208101516132999042614cf6565b9250806040015165ffffffffffff168365ffffffffffff16109150816132c05780516132ef565b806040015165ffffffffffff168365ffffffffffff1682600001516132e59190614d1d565b6132ef9190614d4c565b6001600160801b03169350505b9193909250565b600061330e83613fb0565b60008481548110613321576133216149e8565b906000526020600020906009020160040160008282546133419190614a14565b92505081905550816002848154811061335c5761335c6149e8565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff00000000000019909416939093179092558481526003909152604090205460ff600160e01b90910416156134fa5760008381526003602052604081209080806133cb8761320d565b92509250925082600188815481106133e5576133e56149e8565b906000526020600020906003020160000160008282546134059190614a14565b909155505080156134ce5783548390859060009061342d9084906001600160801b0316614d72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550818460000160168282829054906101000a900465ffffffffffff166134769190614cf6565b82546101009290920a65ffffffffffff81810219909316918316021790915585547fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff16600160801b91891691909102178555506134f5565b83547fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff1684555b505050505b61350383614091565b90506000808481548110613519576135196149e8565b90600052602060002090600902016005015490508082101561359c5781816000868154811061354a5761354a6149e8565b9060005260206000209060090201600401546135669190614b1e565b6135709190614b53565b60008581548110613583576135836149e8565b9060005260206000209060090201600401819055508091505b5092915050565b6000600284815481106135b8576135b86149e8565b60009182526020918290206040805160e081018252919092015465ffffffffffff808216808452600160301b8304821695840195909552600160601b8204811693830193909352600160901b810483166060830152600160c01b81049092166080820181905260ff600160f01b8404811660a0840152600160f81b90930490921660c0820152925061364991614c9d565b65ffffffffffff168365ffffffffffff1610612305576000808581548110613673576136736149e8565b600091825260208083206040805161016081018252600990940290910180546001600160a01b03908116855260018083015482169486019490945260028201549081169285019290925260ff600160a01b8304811615156060860152600160a81b90920490911615156080840152600381015460a0840152600481015460c0840152600581015460e084015260068101546101008401526007810154610120840152600801546101408301528054919350869188908110613736576137366149e8565b906000526020600020906003020160020160079054906101000a900465ffffffffffff166137649190614cf6565b65ffffffffffff16905060008260800151613783578260a001516137d3565b60c084015161379390600a614b0f565b858560a0015160026137a59190614b67565b6137b090600a614b0f565b8560a001516137bf9190614b1e565b6137c99190614b53565b6137d39190614b53565b905081846060015165ffffffffffff16826137ee9190614b1e565b6137f89190614b53565b6000888154811061380b5761380b6149e8565b906000526020600020906009020160060181905550600082856040015165ffffffffffff168361383b9190614b1e565b6138459190614b53565b90506000818660a00151600a61385b9190614b0f565b6138659089614b1e565b61386f9190614b53565b9050887f78f9c01d72705dba80d6ce051d36a1f987bf2a3800fee938c111a2ae741e57d160018b815481106138a6576138a66149e8565b600091825260209182902060039091020154604080519182529181018590520160405180910390a2600189815481106138e1576138e16149e8565b9060005260206000209060030201600001548110613923578060018a8154811061390d5761390d6149e8565b6000918252602090912060039091020155613a53565b60008160018b81548110613939576139396149e8565b9060005260206000209060030201600001546139559190614a14565b90506040518060800160405280826001600160801b031681526020018a65ffffffffffff168152602001886080015165ffffffffffff16815260200160011515815250600360008c815260200190815260200160002060008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160166101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600001601c6101000a81548160ff021916908315150217905550905050505b8760028a81548110613a6757613a676149e8565b6000918252602090912001805465ffffffffffff191665ffffffffffff92909216919091179055505050505050505050565b6000808565ffffffffffff1681548110613ab557613ab56149e8565b600091825260208220600160099092020101546001600160a01b03169150613ade828585614125565b90508615613ce9576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015613b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b519190614d92565b905060008765ffffffffffff1681548110613b6e57613b6e6149e8565b60009182526020909120600990910201546001600160a01b031663a54efcd08888613b99868a614c85565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815265ffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b158015613bfe57600080fd5b505af1158015613c12573d6000803e3d6000fd5b50505050818582613c239190614c85565b613c2d9190614c85565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015613c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c959190614d92565b1015613ce35760405162461bcd60e51b815260206004820152601660248201527f4465706f7369746f72793a206e6f742066756e6465640000000000000000000060448201526064016108b3565b50613d3e565b613d3e60008765ffffffffffff1681548110613d0757613d076149e8565b60009182526020909120600990910201546001600160a01b031630613d2c8488614c85565b6001600160a01b038616929190613e77565b50505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691613db89190614dab565b6000604051808303816000865af19150503d8060008114613df5576040519150601f19603f3d011682016040523d82523d6000602084013e613dfa565b606091505b5091509150818015613e24575080511580613e24575080806020019051810190613e249190614c4d565b613e705760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016108b3565b5050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790529151600092839290881691613ef09190614dab565b6000604051808303816000865af19150503d8060008114613f2d576040519150601f19603f3d011682016040523d82523d6000602084013e613f32565b606091505b5091509150818015613f5c575080511580613f5c575080806020019051810190613f5c9190614c4d565b613fa85760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016108b3565b505050505050565b60008060028381548110613fc657613fc66149e8565b600091825260208083206040805160e081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b8104909116608084015260ff600160f01b8204811660a0850152600160f81b9091041660c08301529092506140529042614a14565b9050816040015165ffffffffffff168160008681548110614075576140756149e8565b906000526020600020906009020160040154610b5f9190614b1e565b6000600282815481106140a6576140a66149e8565b6000918252602090912001546140c790600160f01b900460ff16600a614b0f565b600083815481106140da576140da6149e8565b906000526020600020906009020160040154600184815481106140ff576140ff6149e8565b90600052602060002090600302016000015461411b9190614b1e565b6109c69190614b53565b600080612710600b54856141399190614b1e565b6141439190614b53565b90506000612710600c54866141589190614b1e565b6141629190614b53565b6001600160a01b0385166000908152600e602052604090205490915060ff161561429d576001600160a01b038085166000908152600d60209081526040808320938a16835292905290812080548392906141bd908490614c85565b9250508190555081600d6000600a60009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa15801561421c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142409190614b88565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546142929190614c85565b9091555061437a9050565b6142a78183614c85565b600d6000600a60009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156142fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143229190614b88565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546143749190614c85565b90915550505b6143848183614c85565b9695505050505050565b6000602082840312156143a057600080fd5b5035919050565b600080604083850312156143ba57600080fd5b50508035926020909101359150565b8015158114610c3157600080fd5b6000602082840312156143e957600080fd5b8135610835816143c9565b6001600160a01b0381168114610c3157600080fd5b60006020828403121561441b57600080fd5b8135610835816143f4565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561445f5761445f614426565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561448e5761448e614426565b604052919050565b600067ffffffffffffffff8211156144b0576144b0614426565b5060051b60200190565b600060208083850312156144cd57600080fd5b823567ffffffffffffffff8111156144e457600080fd5b8301601f810185136144f557600080fd5b803561450861450382614496565b614465565b81815260059190911b8201830190838101908783111561452757600080fd5b928401925b8284101561454e57833561453f816143f4565b8252928401929084019061452c565b979650505050505050565b6000806040838503121561456c57600080fd5b8235614577816143f4565b946020939093013593505050565b600080600080600060a0868803121561459d57600080fd5b85356145a8816143f4565b945060208601356145b8816143f4565b94979496505050506040830135926060810135926080909101359150565b600082601f8301126145e757600080fd5b6145ef61443c565b80604084018581111561460157600080fd5b845b81811015611e62578035845260209384019301614603565b600080600060a0848603121561463057600080fd5b833565ffffffffffff8116811461464657600080fd5b92506020614656868683016145d6565b925085607f86011261466757600080fd5b61466f61443c565b8060a087018881111561468157600080fd5b606088015b818110156146a6578035614699816143f4565b8452928401928401614686565b50508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b818110156146ed578351835292840192918401916001016146d1565b50909695505050505050565b6000806040838503121561470c57600080fd5b8235614717816143f4565b91506020830135614727816143f4565b809150509250929050565b6000806040838503121561474557600080fd5b8235614750816143f4565b915060208381013567ffffffffffffffff81111561476d57600080fd5b8401601f8101861361477e57600080fd5b803561478c61450382614496565b81815260059190911b820183019083810190888311156147ab57600080fd5b928401925b828410156147c9578335825292840192908401906147b0565b80955050505050509250929050565b600082601f8301126147e957600080fd5b6040516080810181811067ffffffffffffffff8211171561480c5761480c614426565b60405280608084018581111561482157600080fd5b845b8181101561483b578035835260209283019201614823565b509195945050505050565b600082601f83011261485757600080fd5b61485f61443c565b80604084018581111561487157600080fd5b845b81811015611e62578035614886816143c9565b845260209384019301614873565b600082601f8301126148a557600080fd5b6148ad61443c565b8060408401858111156148bf57600080fd5b845b81811015611e6257803563ffffffff811681146148de5760008081fd5b8452602093840193016148c1565b6000806000806000610180868803121561490557600080fd5b86601f87011261491457600080fd5b61491c61443c565b80604088018981111561492e57600080fd5b885b81811015614951578035614943816143f4565b845260209384019301614930565b5081975061495f8a826147d8565b96505050506149718760c08801614846565b92506149818761010088016145d6565b9150614991876101408801614894565b90509295509295909350565b6000806000606084860312156149b257600080fd5b83356149bd816143c9565b925060208401356149cd816143c9565b915060408401356149dd816143f4565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015614a2657614a266149fe565b500390565b600181815b80851115614a66578160001904821115614a4c57614a4c6149fe565b80851615614a5957918102915b93841c9390800290614a30565b509250929050565b600082614a7d575060016109c6565b81614a8a575060006109c6565b8160018114614aa05760028114614aaa57614ac6565b60019150506109c6565b60ff841115614abb57614abb6149fe565b50506001821b6109c6565b5060208310610133831016604e8410600b8410161715614ae9575081810a6109c6565b614af38383614a2b565b8060001904821115614b0757614b076149fe565b029392505050565b600061083560ff841683614a6e565b6000816000190483118215151615614b3857614b386149fe565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614b6257614b62614b3d565b500490565b600060ff821660ff84168160ff0481118215151615614b0757614b076149fe565b600060208284031215614b9a57600080fd5b8151610835816143f4565b600060208083526000845481600182811c915080831680614bc757607f831692505b858310811415614be557634e487b7160e01b85526022600452602485fd5b878601838152602001818015614c025760018114614c1357614c3e565b60ff19861682528782019650614c3e565b60008b81526020902060005b86811015614c3857815484820152908501908901614c1f565b83019750505b50949998505050505050505050565b600060208284031215614c5f57600080fd5b8151610835816143c9565b6000600019821415614c7e57614c7e6149fe565b5060010190565b60008219821115614c9857614c986149fe565b500190565b600065ffffffffffff808316818516808303821115614cbe57614cbe6149fe565b01949350505050565b600060208284031215614cd957600080fd5b815160ff8116811461083557600080fd5b60006108358383614a6e565b600065ffffffffffff83811690831681811015614d1557614d156149fe565b039392505050565b60006001600160801b0380831681851681830481118215151615614d4357614d436149fe565b02949350505050565b60006001600160801b0380841680614d6657614d66614b3d565b92169190910492915050565b60006001600160801b0383811690831681811015614d1557614d156149fe565b600060208284031215614da457600080fd5b5051919050565b6000825160005b81811015614dcc5760208186018101518583015201614db2565b81811115614ddb576000828501525b50919091019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "author": "Zeus, Indigo Review by: JeffX",
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address[2],uint256[4],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in base token decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term, call]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in base or quote), initial price / base, minimum price, debt buffer (3 decimals)]",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]",
          "_tokens": "[base token for payout, quote token used to deposit]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in base token decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in base token decimals"
        }
      },
      "deposit(uint48,uint256[2],address[2])": {
        "params": {
          "_addresses": "[recipient, referrer]",
          "_amounts": "[amount in, min amount out]"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "indexes_": "   the pending notes for the user"
        }
      },
      "instantSwap(uint256)": {
        "params": {
          "_id": "market ID to search for"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(bool,bool,address)": {
        "params": {
          "_address": "address of creator or token to query by",
          "_base": "if query is for markets by token, search by base or quote token",
          "_creator": "is query for markets by creator, or for markets by token"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in base token decimals price is derived from the equation p = c * d where p = price c = control variable d = debt d -= ( d * (dt / l) )  where dt = change in time l = length of program if price is below minimum price, minimum price is returned this is enforced on deposits by manipulating total debt (see _decay())"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of base tokens to be paid"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        }
      }
    },
    "title": "Olympus Pro Depository V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing marketmust be creator"
      },
      "create(address[2],uint256[4],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "deposit(uint48,uint256[2],address[2])": {
        "notice": "deposit quote tokens in exchange for a bond in a specified market"
      },
      "disableRewards(bool)": {
        "notice": "turn off rewards for front end operators and DAO"
      },
      "enableRewards()": {
        "notice": "turn on rewards for front end operators and DAO"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "instantSwap(uint256)": {
        "notice": "does market send payout immediately"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsBetween(uint256,uint256)": {
        "notice": "returns array of active market IDs within a rangeshould be used if length exceeds max to query entire array"
      },
      "liveMarketsFor(bool,bool,address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of base token in quote tokens"
      },
      "maxIn(uint256)": {
        "notice": "returns maximum quote token in for market"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "whitelist(address)": {
        "notice": "add or remove addresses from the front end reward whitelist"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13736,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "markets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Market)13527_storage)dyn_storage"
      },
      {
        "astId": 13740,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "terms",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Terms)13538_storage)dyn_storage"
      },
      {
        "astId": 13744,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "metadata",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Metadata)13553_storage)dyn_storage"
      },
      {
        "astId": 13749,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "adjustments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)13562_storage)"
      },
      {
        "astId": 13754,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "marketsForBase",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13759,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 13764,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "marketsForCreator",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 14153,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "notes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_struct(Note)13610_storage)dyn_storage)"
      },
      {
        "astId": 14159,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 16788,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 16791,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "authority",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IOlympusAuthority)5040"
      },
      {
        "astId": 14524,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "daoReward",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 14526,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "refReward",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14533,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)4809,t_uint256))"
      },
      {
        "astId": 14537,
        "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
        "label": "whitelisted",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)13527_storage)dyn_storage": {
        "base": "t_struct(Market)13527_storage",
        "encoding": "dynamic_array",
        "label": "struct IProMarketCreator.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)13553_storage)dyn_storage": {
        "base": "t_struct(Metadata)13553_storage",
        "encoding": "dynamic_array",
        "label": "struct IProMarketCreator.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)13610_storage)dyn_storage": {
        "base": "t_struct(Note)13610_storage",
        "encoding": "dynamic_array",
        "label": "struct IProNoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)13538_storage)dyn_storage": {
        "base": "t_struct(Terms)13538_storage",
        "encoding": "dynamic_array",
        "label": "struct IProMarketCreator.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4809": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOlympusAuthority)5040": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)13610_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IProNoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)13610_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)4809,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)4809,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_contract(IERC20)4809,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)4809",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)13562_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IProMarketCreator.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)13562_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)13562_storage": {
        "encoding": "inplace",
        "label": "struct IProMarketCreator.Adjustment",
        "members": [
          {
            "astId": 13555,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 13557,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "lastAdjustment",
            "offset": 16,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13559,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "timeToAdjusted",
            "offset": 22,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13561,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "active",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)13527_storage": {
        "encoding": "inplace",
        "label": "struct IProMarketCreator.Market",
        "members": [
          {
            "astId": 13504,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13507,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "baseToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)4809"
          },
          {
            "astId": 13510,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "quoteToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)4809"
          },
          {
            "astId": 13512,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "call",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13514,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "capacityInQuote",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13516,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "capacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13518,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "totalDebt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13520,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "minPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13522,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "maxPayout",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13524,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "sold",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 13526,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "purchased",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Metadata)13553_storage": {
        "encoding": "inplace",
        "label": "struct IProMarketCreator.Metadata",
        "members": [
          {
            "astId": 13540,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13542,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13544,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13546,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13548,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 13550,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "baseDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13552,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "quoteDecimals",
            "offset": 31,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)13610_storage": {
        "encoding": "inplace",
        "label": "struct IProNoteKeeper.Note",
        "members": [
          {
            "astId": 13599,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13601,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 13603,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 13605,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 13607,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 13609,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Terms)13538_storage": {
        "encoding": "inplace",
        "label": "struct IProMarketCreator.Terms",
        "members": [
          {
            "astId": 13529,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "controlVariable",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13531,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "maxDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13533,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13535,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "vesting",
            "offset": 1,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 13537,
            "contract": "contracts/testnet/TestnetOPBondDepo.sol:TestnetOPBondDepo",
            "label": "conclusion",
            "offset": 7,
            "slot": "2",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}