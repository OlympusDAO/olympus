{
  "address": "0xB54c0e92deE3610F0fe8A69e8d1A53F68460e3cA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextEpochBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OHM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "nextRewardAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "nextRewardFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPolicy_",
          "type": "address"
        }
      ],
      "name": "pushPolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e011168d9505100b26616c6285b3dbd6d417ed37e4a2757aa0e60941c25e1f9",
  "receipt": {
    "to": null,
    "from": "0x6e36b2f9f2BcC273f090ff049952Fa4B5Cc67567",
    "contractAddress": "0xB54c0e92deE3610F0fe8A69e8d1A53F68460e3cA",
    "transactionIndex": 7,
    "gasUsed": "931566",
    "logsBloom": "0x
    "blockHash": "0x6c409223a4536de8ade03414583a65ccf4fec5b0546bea7712dede37ad5ea477",
    "transactionHash": "0x7e011168d9505100b26616c6285b3dbd6d417ed37e4a2757aa0e60941c25e1f9",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 7035323,
        "transactionHash": "0x7e011168d9505100b26616c6285b3dbd6d417ed37e4a2757aa0e60941c25e1f9",
        "address": "0xB54c0e92deE3610F0fe8A69e8d1A53F68460e3cA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e36b2f9f2bcc273f090ff049952fa4b5cc67567"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x6c409223a4536de8ade03414583a65ccf4fec5b0546bea7712dede37ad5ea477"
      }
    ],
    "blockNumber": 7035323,
    "cumulativeGasUsed": "1441655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6Ce41Be5b43139410fb9513A06E77B49fD253d04",
    "0x5f99F707470E81784eA064377b302Ff111b5a95A",
    "2200",
    "7500000"
  ],
  "solcInputHash": "36a212b70d5a47f3c129ea5a35f8ab7f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextEpochBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPolicy_\",\"type\":\"address\"}],\"name\":\"pushPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"_recipient\":\"address\",\"_rewardRate\":\"uint\"}},\"nextRewardAt(uint256)\":{\"params\":{\"_rate\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"nextRewardFor(address)\":{\"params\":{\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"removeRecipient(uint256,address)\":{\"params\":{\"_index\":\"uint\",\"_recipient\":\"address\"}},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"params\":{\"_add\":\"bool\",\"_index\":\"uint\",\"_rate\":\"uint\",\"_target\":\"uint\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"adds recipient for distributions\"},\"distribute()\":{\"notice\":\"send epoch reward to staking contract\"},\"nextRewardAt(uint256)\":{\"notice\":\"view function for next reward at given rate\"},\"nextRewardFor(address)\":{\"notice\":\"view function for next reward for specified address\"},\"removeRecipient(uint256,address)\":{\"notice\":\"removes recipient for distributions\"},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"notice\":\"set adjustment info for a collector's reward rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testnet/DistributorV1.sol\":\"DistributorV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/testnet/DistributorV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n    function percentageAmount(uint256 total_, uint8 percentage_) internal pure returns (uint256 percentAmount_) {\\n        return div(mul(total_, percentage_), 1000);\\n    }\\n\\n    function substractPercentage(uint256 total_, uint8 percentageToSub_) internal pure returns (uint256 result_) {\\n        return sub(total_, div(mul(total_, percentageToSub_), 1000));\\n    }\\n\\n    function percentageOfTotal(uint256 part_, uint256 total_) internal pure returns (uint256 percent_) {\\n        return div(mul(part_, 100), total_);\\n    }\\n\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function quadraticPricing(uint256 payment_, uint256 multiplier_) internal pure returns (uint256) {\\n        return sqrrt(mul(multiplier_, payment_));\\n    }\\n\\n    function bondingCurve(uint256 supply_, uint256 multiplier_) internal pure returns (uint256) {\\n        return mul(multiplier_, supply_);\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length > 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    function addressToString(address _address) internal pure returns (string memory) {\\n        bytes32 _bytes = bytes32(uint256(_address));\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _addr = new bytes(42);\\n\\n        _addr[0] = \\\"0\\\";\\n        _addr[1] = \\\"x\\\";\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n\\n        return string(_addr);\\n    }\\n}\\n\\ninterface IPolicy {\\n    function policy() external view returns (address);\\n\\n    function renouncePolicy() external;\\n\\n    function pushPolicy(address newPolicy_) external;\\n\\n    function pullPolicy() external;\\n}\\n\\ncontract Policy is IPolicy {\\n    address internal _policy;\\n    address internal _newPolicy;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _policy = msg.sender;\\n        emit OwnershipTransferred(address(0), _policy);\\n    }\\n\\n    function policy() public view override returns (address) {\\n        return _policy;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(_policy == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renouncePolicy() public virtual override onlyPolicy {\\n        emit OwnershipTransferred(_policy, address(0));\\n        _policy = address(0);\\n    }\\n\\n    function pushPolicy(address newPolicy_) public virtual override onlyPolicy {\\n        require(newPolicy_ != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _newPolicy = newPolicy_;\\n    }\\n\\n    function pullPolicy() public virtual override {\\n        require(msg.sender == _newPolicy);\\n        emit OwnershipTransferred(_policy, _newPolicy);\\n        _policy = _newPolicy;\\n    }\\n}\\n\\ninterface ITreasury {\\n    function mintRewards(address _recipient, uint256 _amount) external;\\n}\\n\\ncontract DistributorV1 is Policy {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ====== VARIABLES ====== */\\n\\n    address public immutable OHM;\\n    address public immutable treasury;\\n\\n    uint256 public immutable epochLength;\\n    uint256 public nextEpochBlock;\\n\\n    mapping(uint256 => Adjust) public adjustments;\\n\\n    /* ====== STRUCTS ====== */\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n    Info[] public info;\\n\\n    struct Adjust {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    /* ====== CONSTRUCTOR ====== */\\n\\n    constructor(\\n        address _treasury,\\n        address _ohm,\\n        uint256 _epochLength,\\n        uint256 _nextEpochBlock\\n    ) {\\n        require(_treasury != address(0));\\n        treasury = _treasury;\\n        require(_ohm != address(0));\\n        OHM = _ohm;\\n        epochLength = _epochLength;\\n        nextEpochBlock = _nextEpochBlock;\\n    }\\n\\n    /* ====== PUBLIC FUNCTIONS ====== */\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function distribute() external returns (bool) {\\n        if (nextEpochBlock <= block.number) {\\n            nextEpochBlock = nextEpochBlock.add(epochLength); // set next epoch block\\n\\n            // distribute rewards to each recipient\\n            for (uint256 i = 0; i < info.length; i++) {\\n                if (info[i].rate > 0) {\\n                    ITreasury(treasury).mintRewards(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send from treasury\\n                    adjust(i); // check for adjustment\\n                }\\n            }\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /* ====== INTERNAL FUNCTIONS ====== */\\n\\n    /**\\n        @notice increment reward rate for collector\\n     */\\n    function adjust(uint256 _index) internal {\\n        Adjust memory adjustment = adjustments[_index];\\n        if (adjustment.rate != 0) {\\n            if (adjustment.add) {\\n                // if rate should increase\\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\\n                if (info[_index].rate >= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                }\\n            } else {\\n                // if rate should decrease\\n                info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\\n                if (info[_index].rate <= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ====== VIEW FUNCTIONS ====== */\\n\\n    /**\\n        @notice view function for next reward at given rate\\n        @param _rate uint\\n        @return uint\\n     */\\n    function nextRewardAt(uint256 _rate) public view returns (uint256) {\\n        return IERC20(OHM).totalSupply().mul(_rate).div(1000000);\\n    }\\n\\n    /**\\n        @notice view function for next reward for specified address\\n        @param _recipient address\\n        @return uint\\n     */\\n    function nextRewardFor(address _recipient) public view returns (uint256) {\\n        uint256 reward;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].recipient == _recipient) {\\n                reward = nextRewardAt(info[i].rate);\\n            }\\n        }\\n        return reward;\\n    }\\n\\n    /* ====== POLICY FUNCTIONS ====== */\\n\\n    /**\\n        @notice adds recipient for distributions\\n        @param _recipient address\\n        @param _rewardRate uint\\n     */\\n    function addRecipient(address _recipient, uint256 _rewardRate) external onlyPolicy {\\n        require(_recipient != address(0));\\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\\n    }\\n\\n    /**\\n        @notice removes recipient for distributions\\n        @param _index uint\\n        @param _recipient address\\n     */\\n    function removeRecipient(uint256 _index, address _recipient) external onlyPolicy {\\n        require(_recipient == info[_index].recipient);\\n        info[_index].recipient = address(0);\\n        info[_index].rate = 0;\\n    }\\n\\n    /**\\n        @notice set adjustment info for a collector's reward rate\\n        @param _index uint\\n        @param _add bool\\n        @param _rate uint\\n        @param _target uint\\n     */\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external onlyPolicy {\\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\\n    }\\n}\\n\",\"keccak256\":\"0x8ca2988747ec987f019d2c99b6e38a84f9983fc264470a4fe1f0046e1574dd86\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063a15ad07711610097578063c9fa8b2a11610066578063c9fa8b2a14610264578063e4fc6b6d14610281578063f79822431461029d578063fe3fbbad146102c9576100ff565b8063a15ad077146101f1578063a4b2398014610217578063a6c41fec1461021f578063bc3b2b1214610227576100ff565b806357d775f8116100d357806357d775f8146101a65780635beede08146101ae5780635db854b0146101b857806361d027b3146101e9576100ff565b8062640c2e146101045780630505c8c91461011e5780632e3405991461014257806336d33f4414610180575b600080fd5b61010c6102f5565b60408051918252519081900360200190f35b6101266102fb565b604080516001600160a01b039092168252519081900360200190f35b61015f6004803603602081101561015857600080fd5b503561030b565b604080519283526001600160a01b0390911660208301528051918290030190f35b61010c6004803603602081101561019657600080fd5b50356001600160a01b0316610342565b61010c6103c5565b6101b66103e9565b005b6101b6600480360360808110156101ce57600080fd5b50803590602081013515159060408101359060600135610461565b610126610507565b6101b66004803603602081101561020757600080fd5b50356001600160a01b031661052b565b6101b66105f1565b61012661069a565b6102446004803603602081101561023d57600080fd5b50356106be565b604080519315158452602084019290925282820152519081900360600190f35b61010c6004803603602081101561027a57600080fd5b50356106e3565b610289610787565b604080519115158252519081900360200190f35b6101b6600480360360408110156102b357600080fd5b506001600160a01b0381351690602001356108e8565b6101b6600480360360408110156102df57600080fd5b50803590602001356001600160a01b03166109ef565b60025481565b6000546001600160a01b03165b90565b6004818154811061031b57600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60008060005b6004548110156103be57836001600160a01b03166004828154811061036957fe5b60009182526020909120600160029092020101546001600160a01b031614156103b6576103b36004828154811061039c57fe5b9060005260206000209060020201600001546106e3565b91505b600101610348565b5092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b0316331461040057600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146104c0576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60408051606081018252931515845260208085019384528482019283526000958652600390529093209151825460ff19169015151782555160018201559051600290910155565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461058a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166105cf5760405162461bcd60e51b8152600401808060200182810382526026815260200180610eae6026913960400191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610650576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020526000908152604090208054600182015460029092015460ff909116919083565b6000610781620f424061077b847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b505190610aee565b90610b4e565b92915050565b600043600254116108e0576002546107bf907f0000000000000000000000000000000000000000000000000000000000000000610b90565b60025560005b6004548110156108d6576000600482815481106107de57fe5b90600052602060002090600202016000015411156108ce577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636a20de926004838154811061083257fe5b906000526020600020906002020160010160009054906101000a90046001600160a01b03166108676004858154811061039c57fe5b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156108ad57600080fd5b505af11580156108c1573d6000803e3d6000fd5b505050506108ce81610bea565b6001016107c5565b5060019050610308565b506000610308565b6000546001600160a01b03163314610947576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03821661095a57600080fd5b604080518082019091529081526001600160a01b03918216602082019081526004805460018101825560009190915291517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600290930292830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c90910180546001600160a01b03191691909216179055565b6000546001600160a01b03163314610a4e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60048281548110610a5b57fe5b60009182526020909120600160029092020101546001600160a01b03828116911614610a8657600080fd5b600060048381548110610a9557fe5b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060048381548110610ad957fe5b60009182526020909120600290910201555050565b600082610afd57506000610781565b82820282848281610b0a57fe5b0414610b475760405162461bcd60e51b8152600401808060200182810382526021815260200180610ed46021913960400191505060405180910390fd5b9392505050565b6000610b4783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d51565b600082820183811015610b47576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610bf2610e8a565b506000818152600360209081526040918290208251606081018452815460ff161515815260018201549281018390526002909101549281019290925215610d4d57805115610cc657610c66816020015160048481548110610c4f57fe5b600091825260209091206002909102015490610b90565b60048381548110610c7357fe5b600091825260209091206002909102015560408101516004805484908110610c9757fe5b90600052602060002090600202016000015410610cc1576000828152600360205260408120600101555b610d4d565b610cf2816020015160048481548110610cdb57fe5b600091825260209091206002909102015490610df3565b60048381548110610cff57fe5b600091825260209091206002909102015560408101516004805484908110610d2357fe5b90600052602060002090600202016000015411610d4d576000828152600360205260408120600101555b5050565b60008183610ddd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610da2578181015183820152602001610d8a565b50505050905090810190601f168015610dcf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610de957fe5b0495945050505050565b6000610b4783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060008184841115610e825760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610da2578181015183820152602001610d8a565b505050900390565b60405180606001604052806000151581526020016000815260200160008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "_recipient": "address",
          "_rewardRate": "uint"
        }
      },
      "nextRewardAt(uint256)": {
        "params": {
          "_rate": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardFor(address)": {
        "params": {
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "removeRecipient(uint256,address)": {
        "params": {
          "_index": "uint",
          "_recipient": "address"
        }
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "params": {
          "_add": "bool",
          "_index": "uint",
          "_rate": "uint",
          "_target": "uint"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "adds recipient for distributions"
      },
      "distribute()": {
        "notice": "send epoch reward to staking contract"
      },
      "nextRewardAt(uint256)": {
        "notice": "view function for next reward at given rate"
      },
      "nextRewardFor(address)": {
        "notice": "view function for next reward for specified address"
      },
      "removeRecipient(uint256,address)": {
        "notice": "removes recipient for distributions"
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "notice": "set adjustment info for a collector's reward rate"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1093,
        "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
        "label": "_policy",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1095,
        "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
        "label": "_newPolicy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1230,
        "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
        "label": "nextEpochBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1234,
        "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
        "label": "adjustments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Adjust)1249_storage)"
      },
      {
        "astId": 1242,
        "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
        "label": "info",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Info)1239_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Info)1239_storage)dyn_storage": {
        "base": "t_struct(Info)1239_storage",
        "encoding": "dynamic_array",
        "label": "struct DistributorV1.Info[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Adjust)1249_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DistributorV1.Adjust)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjust)1249_storage"
      },
      "t_struct(Adjust)1249_storage": {
        "encoding": "inplace",
        "label": "struct DistributorV1.Adjust",
        "members": [
          {
            "astId": 1244,
            "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1246,
            "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1248,
            "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Info)1239_storage": {
        "encoding": "inplace",
        "label": "struct DistributorV1.Info",
        "members": [
          {
            "astId": 1236,
            "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1238,
            "contract": "contracts/testnet/DistributorV1.sol:DistributorV1",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}